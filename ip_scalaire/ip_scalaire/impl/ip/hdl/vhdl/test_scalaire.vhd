-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity test_scalaire is
generic (
    C_M_AXI_BUS_A_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BUS_A_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_A_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_A_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUS_A_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_A_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_A_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_A_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_B_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BUS_B_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_B_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_B_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUS_B_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_B_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_B_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_B_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_RES_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BUS_RES_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_RES_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_RES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUS_RES_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_RES_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_RES_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS_RES_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUS_A_USER_VALUE : INTEGER := 0;
    C_M_AXI_BUS_A_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BUS_A_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_BUS_B_USER_VALUE : INTEGER := 0;
    C_M_AXI_BUS_B_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BUS_B_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_BUS_RES_USER_VALUE : INTEGER := 0;
    C_M_AXI_BUS_RES_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BUS_RES_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_bus_A_AWVALID : OUT STD_LOGIC;
    m_axi_bus_A_AWREADY : IN STD_LOGIC;
    m_axi_bus_A_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_A_ADDR_WIDTH-1 downto 0);
    m_axi_bus_A_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_A_ID_WIDTH-1 downto 0);
    m_axi_bus_A_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_bus_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_A_AWUSER_WIDTH-1 downto 0);
    m_axi_bus_A_WVALID : OUT STD_LOGIC;
    m_axi_bus_A_WREADY : IN STD_LOGIC;
    m_axi_bus_A_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_A_DATA_WIDTH-1 downto 0);
    m_axi_bus_A_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_A_DATA_WIDTH/8-1 downto 0);
    m_axi_bus_A_WLAST : OUT STD_LOGIC;
    m_axi_bus_A_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_A_ID_WIDTH-1 downto 0);
    m_axi_bus_A_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_A_WUSER_WIDTH-1 downto 0);
    m_axi_bus_A_ARVALID : OUT STD_LOGIC;
    m_axi_bus_A_ARREADY : IN STD_LOGIC;
    m_axi_bus_A_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_A_ADDR_WIDTH-1 downto 0);
    m_axi_bus_A_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_A_ID_WIDTH-1 downto 0);
    m_axi_bus_A_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_bus_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_A_ARUSER_WIDTH-1 downto 0);
    m_axi_bus_A_RVALID : IN STD_LOGIC;
    m_axi_bus_A_RREADY : OUT STD_LOGIC;
    m_axi_bus_A_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_A_DATA_WIDTH-1 downto 0);
    m_axi_bus_A_RLAST : IN STD_LOGIC;
    m_axi_bus_A_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_A_ID_WIDTH-1 downto 0);
    m_axi_bus_A_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_A_RUSER_WIDTH-1 downto 0);
    m_axi_bus_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_BVALID : IN STD_LOGIC;
    m_axi_bus_A_BREADY : OUT STD_LOGIC;
    m_axi_bus_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_A_ID_WIDTH-1 downto 0);
    m_axi_bus_A_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_A_BUSER_WIDTH-1 downto 0);
    m_axi_bus_B_AWVALID : OUT STD_LOGIC;
    m_axi_bus_B_AWREADY : IN STD_LOGIC;
    m_axi_bus_B_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_B_ADDR_WIDTH-1 downto 0);
    m_axi_bus_B_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_B_ID_WIDTH-1 downto 0);
    m_axi_bus_B_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_bus_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_B_AWUSER_WIDTH-1 downto 0);
    m_axi_bus_B_WVALID : OUT STD_LOGIC;
    m_axi_bus_B_WREADY : IN STD_LOGIC;
    m_axi_bus_B_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_B_DATA_WIDTH-1 downto 0);
    m_axi_bus_B_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_B_DATA_WIDTH/8-1 downto 0);
    m_axi_bus_B_WLAST : OUT STD_LOGIC;
    m_axi_bus_B_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_B_ID_WIDTH-1 downto 0);
    m_axi_bus_B_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_B_WUSER_WIDTH-1 downto 0);
    m_axi_bus_B_ARVALID : OUT STD_LOGIC;
    m_axi_bus_B_ARREADY : IN STD_LOGIC;
    m_axi_bus_B_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_B_ADDR_WIDTH-1 downto 0);
    m_axi_bus_B_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_B_ID_WIDTH-1 downto 0);
    m_axi_bus_B_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_bus_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_B_ARUSER_WIDTH-1 downto 0);
    m_axi_bus_B_RVALID : IN STD_LOGIC;
    m_axi_bus_B_RREADY : OUT STD_LOGIC;
    m_axi_bus_B_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_B_DATA_WIDTH-1 downto 0);
    m_axi_bus_B_RLAST : IN STD_LOGIC;
    m_axi_bus_B_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_B_ID_WIDTH-1 downto 0);
    m_axi_bus_B_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_B_RUSER_WIDTH-1 downto 0);
    m_axi_bus_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_BVALID : IN STD_LOGIC;
    m_axi_bus_B_BREADY : OUT STD_LOGIC;
    m_axi_bus_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_B_ID_WIDTH-1 downto 0);
    m_axi_bus_B_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_B_BUSER_WIDTH-1 downto 0);
    m_axi_bus_res_AWVALID : OUT STD_LOGIC;
    m_axi_bus_res_AWREADY : IN STD_LOGIC;
    m_axi_bus_res_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_ADDR_WIDTH-1 downto 0);
    m_axi_bus_res_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_ID_WIDTH-1 downto 0);
    m_axi_bus_res_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_bus_res_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_res_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_res_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_res_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_res_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_res_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_res_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_res_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_AWUSER_WIDTH-1 downto 0);
    m_axi_bus_res_WVALID : OUT STD_LOGIC;
    m_axi_bus_res_WREADY : IN STD_LOGIC;
    m_axi_bus_res_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_DATA_WIDTH-1 downto 0);
    m_axi_bus_res_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_DATA_WIDTH/8-1 downto 0);
    m_axi_bus_res_WLAST : OUT STD_LOGIC;
    m_axi_bus_res_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_ID_WIDTH-1 downto 0);
    m_axi_bus_res_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_WUSER_WIDTH-1 downto 0);
    m_axi_bus_res_ARVALID : OUT STD_LOGIC;
    m_axi_bus_res_ARREADY : IN STD_LOGIC;
    m_axi_bus_res_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_ADDR_WIDTH-1 downto 0);
    m_axi_bus_res_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_ID_WIDTH-1 downto 0);
    m_axi_bus_res_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_bus_res_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_res_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_res_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_res_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_res_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_res_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_res_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_res_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_ARUSER_WIDTH-1 downto 0);
    m_axi_bus_res_RVALID : IN STD_LOGIC;
    m_axi_bus_res_RREADY : OUT STD_LOGIC;
    m_axi_bus_res_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_DATA_WIDTH-1 downto 0);
    m_axi_bus_res_RLAST : IN STD_LOGIC;
    m_axi_bus_res_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_ID_WIDTH-1 downto 0);
    m_axi_bus_res_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_RUSER_WIDTH-1 downto 0);
    m_axi_bus_res_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_res_BVALID : IN STD_LOGIC;
    m_axi_bus_res_BREADY : OUT STD_LOGIC;
    m_axi_bus_res_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_res_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_ID_WIDTH-1 downto 0);
    m_axi_bus_res_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUS_RES_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of test_scalaire is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "test_scalaire_test_scalaire,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.371000,HLS_SYN_LAT=4152,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=3150,HLS_SYN_LUT=3505,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal A : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal A_0_vld_reg : STD_LOGIC := '0';
    signal A_0_ack_out : STD_LOGIC;
    signal B : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal B_0_vld_reg : STD_LOGIC := '0';
    signal B_0_ack_out : STD_LOGIC;
    signal res : STD_LOGIC_VECTOR (31 downto 0);
    signal res_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal res_0_vld_reg : STD_LOGIC := '0';
    signal res_0_ack_out : STD_LOGIC;
    signal bus_res_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bus_res_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal B_read_reg_139 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal A_read_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_149 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_ce0 : STD_LOGIC;
    signal tmp1_we0 : STD_LOGIC;
    signal tmp1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_ce1 : STD_LOGIC;
    signal tmp1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_ap_start : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_ap_done : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_ap_idle : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_ap_ready : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWVALID : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_WVALID : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_WLAST : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARVALID : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_RREADY : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_BREADY : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWVALID : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_WVALID : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_WLAST : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARVALID : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_RREADY : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_BREADY : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_ce0 : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_we0 : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_ce1 : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_start : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_done : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_idle : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_ready : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWVALID : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WVALID : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WLAST : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARVALID : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_RREADY : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_BREADY : STD_LOGIC;
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_tmp1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_tmp1_ce0 : STD_LOGIC;
    signal bus_A_AWREADY : STD_LOGIC;
    signal bus_A_WREADY : STD_LOGIC;
    signal bus_A_ARVALID : STD_LOGIC;
    signal bus_A_ARREADY : STD_LOGIC;
    signal bus_A_RVALID : STD_LOGIC;
    signal bus_A_RREADY : STD_LOGIC;
    signal bus_A_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal bus_A_RLAST : STD_LOGIC;
    signal bus_A_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_A_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_A_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal bus_A_BVALID : STD_LOGIC;
    signal bus_A_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal bus_A_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_A_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_B_AWREADY : STD_LOGIC;
    signal bus_B_WREADY : STD_LOGIC;
    signal bus_B_ARVALID : STD_LOGIC;
    signal bus_B_ARREADY : STD_LOGIC;
    signal bus_B_RVALID : STD_LOGIC;
    signal bus_B_RREADY : STD_LOGIC;
    signal bus_B_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal bus_B_RLAST : STD_LOGIC;
    signal bus_B_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_B_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_B_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal bus_B_BVALID : STD_LOGIC;
    signal bus_B_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal bus_B_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_B_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_res_AWVALID : STD_LOGIC;
    signal bus_res_AWREADY : STD_LOGIC;
    signal bus_res_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal bus_res_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_res_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal bus_res_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal bus_res_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal bus_res_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal bus_res_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal bus_res_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal bus_res_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal bus_res_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal bus_res_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_res_WVALID : STD_LOGIC;
    signal bus_res_WREADY : STD_LOGIC;
    signal bus_res_ARREADY : STD_LOGIC;
    signal bus_res_RVALID : STD_LOGIC;
    signal bus_res_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal bus_res_RLAST : STD_LOGIC;
    signal bus_res_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_res_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_res_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal bus_res_BVALID : STD_LOGIC;
    signal bus_res_BREADY : STD_LOGIC;
    signal bus_res_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal bus_res_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_res_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_test_scalaire_Pipeline_loop_1_fu_98_ap_start_reg : STD_LOGIC := '0';
    signal grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln31_fu_129_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component test_scalaire_test_scalaire_Pipeline_loop_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_A_AWVALID : OUT STD_LOGIC;
        m_axi_bus_A_AWREADY : IN STD_LOGIC;
        m_axi_bus_A_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_A_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_A_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bus_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bus_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_A_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_A_WVALID : OUT STD_LOGIC;
        m_axi_bus_A_WREADY : IN STD_LOGIC;
        m_axi_bus_A_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_A_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_A_WLAST : OUT STD_LOGIC;
        m_axi_bus_A_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_A_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_A_ARVALID : OUT STD_LOGIC;
        m_axi_bus_A_ARREADY : IN STD_LOGIC;
        m_axi_bus_A_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_A_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_A_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bus_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bus_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_A_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_A_RVALID : IN STD_LOGIC;
        m_axi_bus_A_RREADY : OUT STD_LOGIC;
        m_axi_bus_A_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_A_RLAST : IN STD_LOGIC;
        m_axi_bus_A_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_A_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_A_BVALID : IN STD_LOGIC;
        m_axi_bus_A_BREADY : OUT STD_LOGIC;
        m_axi_bus_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_A_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_A_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        B : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_B_AWVALID : OUT STD_LOGIC;
        m_axi_bus_B_AWREADY : IN STD_LOGIC;
        m_axi_bus_B_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_B_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_B_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bus_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bus_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_B_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_B_WVALID : OUT STD_LOGIC;
        m_axi_bus_B_WREADY : IN STD_LOGIC;
        m_axi_bus_B_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_B_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_B_WLAST : OUT STD_LOGIC;
        m_axi_bus_B_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_B_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_B_ARVALID : OUT STD_LOGIC;
        m_axi_bus_B_ARREADY : IN STD_LOGIC;
        m_axi_bus_B_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_B_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_B_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bus_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bus_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_B_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_B_RVALID : IN STD_LOGIC;
        m_axi_bus_B_RREADY : OUT STD_LOGIC;
        m_axi_bus_B_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_B_RLAST : IN STD_LOGIC;
        m_axi_bus_B_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_B_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_B_BVALID : IN STD_LOGIC;
        m_axi_bus_B_BREADY : OUT STD_LOGIC;
        m_axi_bus_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_B_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_B_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        tmp1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        tmp1_ce0 : OUT STD_LOGIC;
        tmp1_we0 : OUT STD_LOGIC;
        tmp1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tmp1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        tmp1_ce1 : OUT STD_LOGIC;
        tmp1_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component test_scalaire_test_scalaire_Pipeline_VITIS_LOOP_31_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_bus_res_AWVALID : OUT STD_LOGIC;
        m_axi_bus_res_AWREADY : IN STD_LOGIC;
        m_axi_bus_res_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_res_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_res_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_res_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bus_res_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_res_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_res_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_res_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bus_res_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_res_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_res_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_res_WVALID : OUT STD_LOGIC;
        m_axi_bus_res_WREADY : IN STD_LOGIC;
        m_axi_bus_res_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_res_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_res_WLAST : OUT STD_LOGIC;
        m_axi_bus_res_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_res_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_res_ARVALID : OUT STD_LOGIC;
        m_axi_bus_res_ARREADY : IN STD_LOGIC;
        m_axi_bus_res_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_res_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_res_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_res_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bus_res_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_res_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_res_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_res_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bus_res_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_res_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bus_res_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_res_RVALID : IN STD_LOGIC;
        m_axi_bus_res_RREADY : OUT STD_LOGIC;
        m_axi_bus_res_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bus_res_RLAST : IN STD_LOGIC;
        m_axi_bus_res_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_res_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_res_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_res_BVALID : IN STD_LOGIC;
        m_axi_bus_res_BREADY : OUT STD_LOGIC;
        m_axi_bus_res_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bus_res_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bus_res_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln31 : IN STD_LOGIC_VECTOR (29 downto 0);
        tmp1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        tmp1_ce0 : OUT STD_LOGIC;
        tmp1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component test_scalaire_tmp1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component test_scalaire_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        A : OUT STD_LOGIC_VECTOR (31 downto 0);
        B : OUT STD_LOGIC_VECTOR (31 downto 0);
        res : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component test_scalaire_bus_A_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component test_scalaire_bus_B_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component test_scalaire_bus_res_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    tmp1_U : component test_scalaire_tmp1
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tmp1_address0,
        ce0 => tmp1_ce0,
        we0 => tmp1_we0,
        d0 => grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_d0,
        q0 => tmp1_q0,
        address1 => grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_address1,
        ce1 => tmp1_ce1,
        q1 => tmp1_q1);

    grp_test_scalaire_Pipeline_loop_1_fu_98 : component test_scalaire_test_scalaire_Pipeline_loop_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_test_scalaire_Pipeline_loop_1_fu_98_ap_start,
        ap_done => grp_test_scalaire_Pipeline_loop_1_fu_98_ap_done,
        ap_idle => grp_test_scalaire_Pipeline_loop_1_fu_98_ap_idle,
        ap_ready => grp_test_scalaire_Pipeline_loop_1_fu_98_ap_ready,
        A => A_read_reg_144,
        m_axi_bus_A_AWVALID => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWVALID,
        m_axi_bus_A_AWREADY => ap_const_logic_0,
        m_axi_bus_A_AWADDR => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWADDR,
        m_axi_bus_A_AWID => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWID,
        m_axi_bus_A_AWLEN => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWLEN,
        m_axi_bus_A_AWSIZE => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWSIZE,
        m_axi_bus_A_AWBURST => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWBURST,
        m_axi_bus_A_AWLOCK => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWLOCK,
        m_axi_bus_A_AWCACHE => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWCACHE,
        m_axi_bus_A_AWPROT => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWPROT,
        m_axi_bus_A_AWQOS => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWQOS,
        m_axi_bus_A_AWREGION => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWREGION,
        m_axi_bus_A_AWUSER => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_AWUSER,
        m_axi_bus_A_WVALID => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_WVALID,
        m_axi_bus_A_WREADY => ap_const_logic_0,
        m_axi_bus_A_WDATA => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_WDATA,
        m_axi_bus_A_WSTRB => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_WSTRB,
        m_axi_bus_A_WLAST => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_WLAST,
        m_axi_bus_A_WID => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_WID,
        m_axi_bus_A_WUSER => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_WUSER,
        m_axi_bus_A_ARVALID => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARVALID,
        m_axi_bus_A_ARREADY => bus_A_ARREADY,
        m_axi_bus_A_ARADDR => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARADDR,
        m_axi_bus_A_ARID => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARID,
        m_axi_bus_A_ARLEN => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARLEN,
        m_axi_bus_A_ARSIZE => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARSIZE,
        m_axi_bus_A_ARBURST => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARBURST,
        m_axi_bus_A_ARLOCK => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARLOCK,
        m_axi_bus_A_ARCACHE => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARCACHE,
        m_axi_bus_A_ARPROT => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARPROT,
        m_axi_bus_A_ARQOS => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARQOS,
        m_axi_bus_A_ARREGION => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARREGION,
        m_axi_bus_A_ARUSER => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARUSER,
        m_axi_bus_A_RVALID => bus_A_RVALID,
        m_axi_bus_A_RREADY => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_RREADY,
        m_axi_bus_A_RDATA => bus_A_RDATA,
        m_axi_bus_A_RLAST => bus_A_RLAST,
        m_axi_bus_A_RID => bus_A_RID,
        m_axi_bus_A_RUSER => bus_A_RUSER,
        m_axi_bus_A_RRESP => bus_A_RRESP,
        m_axi_bus_A_BVALID => ap_const_logic_0,
        m_axi_bus_A_BREADY => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_BREADY,
        m_axi_bus_A_BRESP => ap_const_lv2_0,
        m_axi_bus_A_BID => ap_const_lv1_0,
        m_axi_bus_A_BUSER => ap_const_lv1_0,
        B => B_read_reg_139,
        m_axi_bus_B_AWVALID => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWVALID,
        m_axi_bus_B_AWREADY => ap_const_logic_0,
        m_axi_bus_B_AWADDR => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWADDR,
        m_axi_bus_B_AWID => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWID,
        m_axi_bus_B_AWLEN => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWLEN,
        m_axi_bus_B_AWSIZE => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWSIZE,
        m_axi_bus_B_AWBURST => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWBURST,
        m_axi_bus_B_AWLOCK => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWLOCK,
        m_axi_bus_B_AWCACHE => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWCACHE,
        m_axi_bus_B_AWPROT => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWPROT,
        m_axi_bus_B_AWQOS => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWQOS,
        m_axi_bus_B_AWREGION => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWREGION,
        m_axi_bus_B_AWUSER => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_AWUSER,
        m_axi_bus_B_WVALID => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_WVALID,
        m_axi_bus_B_WREADY => ap_const_logic_0,
        m_axi_bus_B_WDATA => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_WDATA,
        m_axi_bus_B_WSTRB => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_WSTRB,
        m_axi_bus_B_WLAST => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_WLAST,
        m_axi_bus_B_WID => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_WID,
        m_axi_bus_B_WUSER => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_WUSER,
        m_axi_bus_B_ARVALID => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARVALID,
        m_axi_bus_B_ARREADY => bus_B_ARREADY,
        m_axi_bus_B_ARADDR => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARADDR,
        m_axi_bus_B_ARID => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARID,
        m_axi_bus_B_ARLEN => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARLEN,
        m_axi_bus_B_ARSIZE => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARSIZE,
        m_axi_bus_B_ARBURST => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARBURST,
        m_axi_bus_B_ARLOCK => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARLOCK,
        m_axi_bus_B_ARCACHE => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARCACHE,
        m_axi_bus_B_ARPROT => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARPROT,
        m_axi_bus_B_ARQOS => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARQOS,
        m_axi_bus_B_ARREGION => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARREGION,
        m_axi_bus_B_ARUSER => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARUSER,
        m_axi_bus_B_RVALID => bus_B_RVALID,
        m_axi_bus_B_RREADY => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_RREADY,
        m_axi_bus_B_RDATA => bus_B_RDATA,
        m_axi_bus_B_RLAST => bus_B_RLAST,
        m_axi_bus_B_RID => bus_B_RID,
        m_axi_bus_B_RUSER => bus_B_RUSER,
        m_axi_bus_B_RRESP => bus_B_RRESP,
        m_axi_bus_B_BVALID => ap_const_logic_0,
        m_axi_bus_B_BREADY => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_BREADY,
        m_axi_bus_B_BRESP => ap_const_lv2_0,
        m_axi_bus_B_BID => ap_const_lv1_0,
        m_axi_bus_B_BUSER => ap_const_lv1_0,
        tmp1_address0 => grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_address0,
        tmp1_ce0 => grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_ce0,
        tmp1_we0 => grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_we0,
        tmp1_d0 => grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_d0,
        tmp1_address1 => grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_address1,
        tmp1_ce1 => grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_ce1,
        tmp1_q1 => tmp1_q1);

    grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111 : component test_scalaire_test_scalaire_Pipeline_VITIS_LOOP_31_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_start,
        ap_done => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_done,
        ap_idle => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_idle,
        ap_ready => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_ready,
        m_axi_bus_res_AWVALID => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWVALID,
        m_axi_bus_res_AWREADY => bus_res_AWREADY,
        m_axi_bus_res_AWADDR => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWADDR,
        m_axi_bus_res_AWID => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWID,
        m_axi_bus_res_AWLEN => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWLEN,
        m_axi_bus_res_AWSIZE => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWSIZE,
        m_axi_bus_res_AWBURST => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWBURST,
        m_axi_bus_res_AWLOCK => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWLOCK,
        m_axi_bus_res_AWCACHE => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWCACHE,
        m_axi_bus_res_AWPROT => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWPROT,
        m_axi_bus_res_AWQOS => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWQOS,
        m_axi_bus_res_AWREGION => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWREGION,
        m_axi_bus_res_AWUSER => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWUSER,
        m_axi_bus_res_WVALID => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WVALID,
        m_axi_bus_res_WREADY => bus_res_WREADY,
        m_axi_bus_res_WDATA => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WDATA,
        m_axi_bus_res_WSTRB => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WSTRB,
        m_axi_bus_res_WLAST => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WLAST,
        m_axi_bus_res_WID => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WID,
        m_axi_bus_res_WUSER => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WUSER,
        m_axi_bus_res_ARVALID => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARVALID,
        m_axi_bus_res_ARREADY => ap_const_logic_0,
        m_axi_bus_res_ARADDR => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARADDR,
        m_axi_bus_res_ARID => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARID,
        m_axi_bus_res_ARLEN => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARLEN,
        m_axi_bus_res_ARSIZE => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARSIZE,
        m_axi_bus_res_ARBURST => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARBURST,
        m_axi_bus_res_ARLOCK => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARLOCK,
        m_axi_bus_res_ARCACHE => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARCACHE,
        m_axi_bus_res_ARPROT => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARPROT,
        m_axi_bus_res_ARQOS => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARQOS,
        m_axi_bus_res_ARREGION => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARREGION,
        m_axi_bus_res_ARUSER => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_ARUSER,
        m_axi_bus_res_RVALID => ap_const_logic_0,
        m_axi_bus_res_RREADY => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_RREADY,
        m_axi_bus_res_RDATA => ap_const_lv32_0,
        m_axi_bus_res_RLAST => ap_const_logic_0,
        m_axi_bus_res_RID => ap_const_lv1_0,
        m_axi_bus_res_RUSER => ap_const_lv1_0,
        m_axi_bus_res_RRESP => ap_const_lv2_0,
        m_axi_bus_res_BVALID => bus_res_BVALID,
        m_axi_bus_res_BREADY => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_BREADY,
        m_axi_bus_res_BRESP => bus_res_BRESP,
        m_axi_bus_res_BID => bus_res_BID,
        m_axi_bus_res_BUSER => bus_res_BUSER,
        sext_ln31 => trunc_ln_reg_149,
        tmp1_address0 => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_tmp1_address0,
        tmp1_ce0 => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_tmp1_ce0,
        tmp1_q0 => tmp1_q0);

    control_s_axi_U : component test_scalaire_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        A => A,
        B => B,
        res => res,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    bus_A_m_axi_U : component test_scalaire_bus_A_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BUS_A_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BUS_A_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BUS_A_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BUS_A_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BUS_A_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BUS_A_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BUS_A_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BUS_A_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BUS_A_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BUS_A_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BUS_A_CACHE_VALUE)
    port map (
        AWVALID => m_axi_bus_A_AWVALID,
        AWREADY => m_axi_bus_A_AWREADY,
        AWADDR => m_axi_bus_A_AWADDR,
        AWID => m_axi_bus_A_AWID,
        AWLEN => m_axi_bus_A_AWLEN,
        AWSIZE => m_axi_bus_A_AWSIZE,
        AWBURST => m_axi_bus_A_AWBURST,
        AWLOCK => m_axi_bus_A_AWLOCK,
        AWCACHE => m_axi_bus_A_AWCACHE,
        AWPROT => m_axi_bus_A_AWPROT,
        AWQOS => m_axi_bus_A_AWQOS,
        AWREGION => m_axi_bus_A_AWREGION,
        AWUSER => m_axi_bus_A_AWUSER,
        WVALID => m_axi_bus_A_WVALID,
        WREADY => m_axi_bus_A_WREADY,
        WDATA => m_axi_bus_A_WDATA,
        WSTRB => m_axi_bus_A_WSTRB,
        WLAST => m_axi_bus_A_WLAST,
        WID => m_axi_bus_A_WID,
        WUSER => m_axi_bus_A_WUSER,
        ARVALID => m_axi_bus_A_ARVALID,
        ARREADY => m_axi_bus_A_ARREADY,
        ARADDR => m_axi_bus_A_ARADDR,
        ARID => m_axi_bus_A_ARID,
        ARLEN => m_axi_bus_A_ARLEN,
        ARSIZE => m_axi_bus_A_ARSIZE,
        ARBURST => m_axi_bus_A_ARBURST,
        ARLOCK => m_axi_bus_A_ARLOCK,
        ARCACHE => m_axi_bus_A_ARCACHE,
        ARPROT => m_axi_bus_A_ARPROT,
        ARQOS => m_axi_bus_A_ARQOS,
        ARREGION => m_axi_bus_A_ARREGION,
        ARUSER => m_axi_bus_A_ARUSER,
        RVALID => m_axi_bus_A_RVALID,
        RREADY => m_axi_bus_A_RREADY,
        RDATA => m_axi_bus_A_RDATA,
        RLAST => m_axi_bus_A_RLAST,
        RID => m_axi_bus_A_RID,
        RUSER => m_axi_bus_A_RUSER,
        RRESP => m_axi_bus_A_RRESP,
        BVALID => m_axi_bus_A_BVALID,
        BREADY => m_axi_bus_A_BREADY,
        BRESP => m_axi_bus_A_BRESP,
        BID => m_axi_bus_A_BID,
        BUSER => m_axi_bus_A_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => bus_A_ARVALID,
        I_ARREADY => bus_A_ARREADY,
        I_ARADDR => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARADDR,
        I_ARID => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARID,
        I_ARLEN => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARLEN,
        I_ARSIZE => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARSIZE,
        I_ARLOCK => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARLOCK,
        I_ARCACHE => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARCACHE,
        I_ARQOS => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARQOS,
        I_ARPROT => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARPROT,
        I_ARUSER => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARUSER,
        I_ARBURST => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARBURST,
        I_ARREGION => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARREGION,
        I_RVALID => bus_A_RVALID,
        I_RREADY => bus_A_RREADY,
        I_RDATA => bus_A_RDATA,
        I_RID => bus_A_RID,
        I_RUSER => bus_A_RUSER,
        I_RRESP => bus_A_RRESP,
        I_RLAST => bus_A_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => bus_A_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => bus_A_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => bus_A_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => bus_A_BRESP,
        I_BID => bus_A_BID,
        I_BUSER => bus_A_BUSER);

    bus_B_m_axi_U : component test_scalaire_bus_B_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BUS_B_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BUS_B_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BUS_B_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BUS_B_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BUS_B_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BUS_B_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BUS_B_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BUS_B_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BUS_B_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BUS_B_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BUS_B_CACHE_VALUE)
    port map (
        AWVALID => m_axi_bus_B_AWVALID,
        AWREADY => m_axi_bus_B_AWREADY,
        AWADDR => m_axi_bus_B_AWADDR,
        AWID => m_axi_bus_B_AWID,
        AWLEN => m_axi_bus_B_AWLEN,
        AWSIZE => m_axi_bus_B_AWSIZE,
        AWBURST => m_axi_bus_B_AWBURST,
        AWLOCK => m_axi_bus_B_AWLOCK,
        AWCACHE => m_axi_bus_B_AWCACHE,
        AWPROT => m_axi_bus_B_AWPROT,
        AWQOS => m_axi_bus_B_AWQOS,
        AWREGION => m_axi_bus_B_AWREGION,
        AWUSER => m_axi_bus_B_AWUSER,
        WVALID => m_axi_bus_B_WVALID,
        WREADY => m_axi_bus_B_WREADY,
        WDATA => m_axi_bus_B_WDATA,
        WSTRB => m_axi_bus_B_WSTRB,
        WLAST => m_axi_bus_B_WLAST,
        WID => m_axi_bus_B_WID,
        WUSER => m_axi_bus_B_WUSER,
        ARVALID => m_axi_bus_B_ARVALID,
        ARREADY => m_axi_bus_B_ARREADY,
        ARADDR => m_axi_bus_B_ARADDR,
        ARID => m_axi_bus_B_ARID,
        ARLEN => m_axi_bus_B_ARLEN,
        ARSIZE => m_axi_bus_B_ARSIZE,
        ARBURST => m_axi_bus_B_ARBURST,
        ARLOCK => m_axi_bus_B_ARLOCK,
        ARCACHE => m_axi_bus_B_ARCACHE,
        ARPROT => m_axi_bus_B_ARPROT,
        ARQOS => m_axi_bus_B_ARQOS,
        ARREGION => m_axi_bus_B_ARREGION,
        ARUSER => m_axi_bus_B_ARUSER,
        RVALID => m_axi_bus_B_RVALID,
        RREADY => m_axi_bus_B_RREADY,
        RDATA => m_axi_bus_B_RDATA,
        RLAST => m_axi_bus_B_RLAST,
        RID => m_axi_bus_B_RID,
        RUSER => m_axi_bus_B_RUSER,
        RRESP => m_axi_bus_B_RRESP,
        BVALID => m_axi_bus_B_BVALID,
        BREADY => m_axi_bus_B_BREADY,
        BRESP => m_axi_bus_B_BRESP,
        BID => m_axi_bus_B_BID,
        BUSER => m_axi_bus_B_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => bus_B_ARVALID,
        I_ARREADY => bus_B_ARREADY,
        I_ARADDR => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARADDR,
        I_ARID => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARID,
        I_ARLEN => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARLEN,
        I_ARSIZE => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARSIZE,
        I_ARLOCK => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARLOCK,
        I_ARCACHE => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARCACHE,
        I_ARQOS => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARQOS,
        I_ARPROT => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARPROT,
        I_ARUSER => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARUSER,
        I_ARBURST => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARBURST,
        I_ARREGION => grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARREGION,
        I_RVALID => bus_B_RVALID,
        I_RREADY => bus_B_RREADY,
        I_RDATA => bus_B_RDATA,
        I_RID => bus_B_RID,
        I_RUSER => bus_B_RUSER,
        I_RRESP => bus_B_RRESP,
        I_RLAST => bus_B_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => bus_B_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => bus_B_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => bus_B_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => bus_B_BRESP,
        I_BID => bus_B_BID,
        I_BUSER => bus_B_BUSER);

    bus_res_m_axi_U : component test_scalaire_bus_res_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BUS_RES_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BUS_RES_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BUS_RES_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BUS_RES_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BUS_RES_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BUS_RES_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BUS_RES_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BUS_RES_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BUS_RES_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BUS_RES_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BUS_RES_CACHE_VALUE)
    port map (
        AWVALID => m_axi_bus_res_AWVALID,
        AWREADY => m_axi_bus_res_AWREADY,
        AWADDR => m_axi_bus_res_AWADDR,
        AWID => m_axi_bus_res_AWID,
        AWLEN => m_axi_bus_res_AWLEN,
        AWSIZE => m_axi_bus_res_AWSIZE,
        AWBURST => m_axi_bus_res_AWBURST,
        AWLOCK => m_axi_bus_res_AWLOCK,
        AWCACHE => m_axi_bus_res_AWCACHE,
        AWPROT => m_axi_bus_res_AWPROT,
        AWQOS => m_axi_bus_res_AWQOS,
        AWREGION => m_axi_bus_res_AWREGION,
        AWUSER => m_axi_bus_res_AWUSER,
        WVALID => m_axi_bus_res_WVALID,
        WREADY => m_axi_bus_res_WREADY,
        WDATA => m_axi_bus_res_WDATA,
        WSTRB => m_axi_bus_res_WSTRB,
        WLAST => m_axi_bus_res_WLAST,
        WID => m_axi_bus_res_WID,
        WUSER => m_axi_bus_res_WUSER,
        ARVALID => m_axi_bus_res_ARVALID,
        ARREADY => m_axi_bus_res_ARREADY,
        ARADDR => m_axi_bus_res_ARADDR,
        ARID => m_axi_bus_res_ARID,
        ARLEN => m_axi_bus_res_ARLEN,
        ARSIZE => m_axi_bus_res_ARSIZE,
        ARBURST => m_axi_bus_res_ARBURST,
        ARLOCK => m_axi_bus_res_ARLOCK,
        ARCACHE => m_axi_bus_res_ARCACHE,
        ARPROT => m_axi_bus_res_ARPROT,
        ARQOS => m_axi_bus_res_ARQOS,
        ARREGION => m_axi_bus_res_ARREGION,
        ARUSER => m_axi_bus_res_ARUSER,
        RVALID => m_axi_bus_res_RVALID,
        RREADY => m_axi_bus_res_RREADY,
        RDATA => m_axi_bus_res_RDATA,
        RLAST => m_axi_bus_res_RLAST,
        RID => m_axi_bus_res_RID,
        RUSER => m_axi_bus_res_RUSER,
        RRESP => m_axi_bus_res_RRESP,
        BVALID => m_axi_bus_res_BVALID,
        BREADY => m_axi_bus_res_BREADY,
        BRESP => m_axi_bus_res_BRESP,
        BID => m_axi_bus_res_BID,
        BUSER => m_axi_bus_res_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => bus_res_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => bus_res_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => bus_res_RDATA,
        I_RID => bus_res_RID,
        I_RUSER => bus_res_RUSER,
        I_RRESP => bus_res_RRESP,
        I_RLAST => bus_res_RLAST,
        I_AWVALID => bus_res_AWVALID,
        I_AWREADY => bus_res_AWREADY,
        I_AWADDR => bus_res_AWADDR,
        I_AWID => bus_res_AWID,
        I_AWLEN => bus_res_AWLEN,
        I_AWSIZE => bus_res_AWSIZE,
        I_AWLOCK => bus_res_AWLOCK,
        I_AWCACHE => bus_res_AWCACHE,
        I_AWQOS => bus_res_AWQOS,
        I_AWPROT => bus_res_AWPROT,
        I_AWUSER => bus_res_AWUSER,
        I_AWBURST => bus_res_AWBURST,
        I_AWREGION => bus_res_AWREGION,
        I_WVALID => bus_res_WVALID,
        I_WREADY => bus_res_WREADY,
        I_WDATA => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WDATA,
        I_WID => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WID,
        I_WUSER => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WUSER,
        I_WLAST => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WLAST,
        I_WSTRB => grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WSTRB,
        I_BVALID => bus_res_BVALID,
        I_BREADY => bus_res_BREADY,
        I_BRESP => bus_res_BRESP,
        I_BID => bus_res_BID,
        I_BUSER => bus_res_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_ready = ap_const_logic_1)) then 
                    grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_test_scalaire_Pipeline_loop_1_fu_98_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_test_scalaire_Pipeline_loop_1_fu_98_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_test_scalaire_Pipeline_loop_1_fu_98_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_test_scalaire_Pipeline_loop_1_fu_98_ap_ready = ap_const_logic_1)) then 
                    grp_test_scalaire_Pipeline_loop_1_fu_98_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    A_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    B_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    res_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = A_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = A_0_vld_reg)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_0 = A_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                A_0_data_reg <= A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                A_read_reg_144 <= A_0_data_reg;
                B_read_reg_139 <= B_0_data_reg;
                trunc_ln_reg_149 <= res_0_data_reg(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = B_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = B_0_vld_reg)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_0 = B_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                B_0_data_reg <= B;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (res_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (res_0_vld_reg = ap_const_logic_1)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_const_logic_1) and (res_0_vld_reg = ap_const_logic_0)))) then
                res_0_data_reg <= res;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state10, grp_test_scalaire_Pipeline_loop_1_fu_98_ap_done, grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_done, bus_res_AWREADY, bus_res_BVALID, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((bus_res_AWREADY = ap_const_logic_0) or (grp_test_scalaire_Pipeline_loop_1_fu_98_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((bus_res_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    A_0_ack_out_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state2, bus_res_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((bus_res_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            A_0_ack_out <= ap_const_logic_1;
        else 
            A_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    B_0_ack_out_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state2, bus_res_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((bus_res_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            B_0_ack_out <= ap_const_logic_1;
        else 
            B_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state10_blk_assign_proc : process(bus_res_BVALID)
    begin
        if ((bus_res_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_test_scalaire_Pipeline_loop_1_fu_98_ap_done, bus_res_AWREADY)
    begin
        if (((bus_res_AWREADY = ap_const_logic_0) or (grp_test_scalaire_Pipeline_loop_1_fu_98_ap_done = ap_const_logic_0))) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_done)
    begin
        if ((grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state10, bus_res_BVALID)
    begin
        if (((bus_res_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, bus_res_BVALID)
    begin
        if (((bus_res_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    bus_A_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bus_A_ARVALID <= grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_ARVALID;
        else 
            bus_A_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    bus_A_RREADY_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_RREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bus_A_RREADY <= grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_A_RREADY;
        else 
            bus_A_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    bus_B_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bus_B_ARVALID <= grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_ARVALID;
        else 
            bus_B_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    bus_B_RREADY_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_RREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bus_B_RREADY <= grp_test_scalaire_Pipeline_loop_1_fu_98_m_axi_bus_B_RREADY;
        else 
            bus_B_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    bus_res_AWADDR_assign_proc : process(ap_CS_fsm_state3, grp_test_scalaire_Pipeline_loop_1_fu_98_ap_done, grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWADDR, bus_res_AWREADY, ap_CS_fsm_state4, ap_CS_fsm_state5, sext_ln31_fu_129_p1)
    begin
        if ((not(((bus_res_AWREADY = ap_const_logic_0) or (grp_test_scalaire_Pipeline_loop_1_fu_98_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bus_res_AWADDR <= sext_ln31_fu_129_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bus_res_AWADDR <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWADDR;
        else 
            bus_res_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bus_res_AWBURST_assign_proc : process(grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWBURST, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bus_res_AWBURST <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWBURST;
        else 
            bus_res_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    bus_res_AWCACHE_assign_proc : process(grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWCACHE, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bus_res_AWCACHE <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWCACHE;
        else 
            bus_res_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    bus_res_AWID_assign_proc : process(grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWID, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bus_res_AWID <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWID;
        else 
            bus_res_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    bus_res_AWLEN_assign_proc : process(ap_CS_fsm_state3, grp_test_scalaire_Pipeline_loop_1_fu_98_ap_done, grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWLEN, bus_res_AWREADY, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((not(((bus_res_AWREADY = ap_const_logic_0) or (grp_test_scalaire_Pipeline_loop_1_fu_98_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bus_res_AWLEN <= ap_const_lv32_10;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bus_res_AWLEN <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWLEN;
        else 
            bus_res_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bus_res_AWLOCK_assign_proc : process(grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWLOCK, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bus_res_AWLOCK <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWLOCK;
        else 
            bus_res_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    bus_res_AWPROT_assign_proc : process(grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWPROT, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bus_res_AWPROT <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWPROT;
        else 
            bus_res_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    bus_res_AWQOS_assign_proc : process(grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWQOS, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bus_res_AWQOS <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWQOS;
        else 
            bus_res_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    bus_res_AWREGION_assign_proc : process(grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWREGION, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bus_res_AWREGION <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWREGION;
        else 
            bus_res_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    bus_res_AWSIZE_assign_proc : process(grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWSIZE, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bus_res_AWSIZE <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWSIZE;
        else 
            bus_res_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    bus_res_AWUSER_assign_proc : process(grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWUSER, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bus_res_AWUSER <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWUSER;
        else 
            bus_res_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    bus_res_AWVALID_assign_proc : process(ap_CS_fsm_state3, grp_test_scalaire_Pipeline_loop_1_fu_98_ap_done, grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWVALID, bus_res_AWREADY, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((not(((bus_res_AWREADY = ap_const_logic_0) or (grp_test_scalaire_Pipeline_loop_1_fu_98_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bus_res_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bus_res_AWVALID <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_AWVALID;
        else 
            bus_res_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    bus_res_BREADY_assign_proc : process(ap_CS_fsm_state10, grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_BREADY, bus_res_BVALID, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((bus_res_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            bus_res_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bus_res_BREADY <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_BREADY;
        else 
            bus_res_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    bus_res_WVALID_assign_proc : process(grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WVALID, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bus_res_WVALID <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_m_axi_bus_res_WVALID;
        else 
            bus_res_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    bus_res_blk_n_AW_assign_proc : process(m_axi_bus_res_AWREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bus_res_blk_n_AW <= m_axi_bus_res_AWREADY;
        else 
            bus_res_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    bus_res_blk_n_B_assign_proc : process(m_axi_bus_res_BVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bus_res_blk_n_B <= m_axi_bus_res_BVALID;
        else 
            bus_res_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;

    grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_start <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_ap_start_reg;
    grp_test_scalaire_Pipeline_loop_1_fu_98_ap_start <= grp_test_scalaire_Pipeline_loop_1_fu_98_ap_start_reg;

    res_0_ack_out_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state2, bus_res_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((bus_res_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            res_0_ack_out <= ap_const_logic_1;
        else 
            res_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln31_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_149),32));


    tmp1_address0_assign_proc : process(ap_CS_fsm_state3, grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_address0, grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_tmp1_address0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp1_address0 <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_tmp1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tmp1_address0 <= grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_address0;
        else 
            tmp1_address0 <= "XXXX";
        end if; 
    end process;


    tmp1_ce0_assign_proc : process(ap_CS_fsm_state3, grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_ce0, grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_tmp1_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp1_ce0 <= grp_test_scalaire_Pipeline_VITIS_LOOP_31_1_fu_111_tmp1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tmp1_ce0 <= grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_ce0;
        else 
            tmp1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp1_ce1_assign_proc : process(ap_CS_fsm_state3, grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tmp1_ce1 <= grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_ce1;
        else 
            tmp1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tmp1_we0_assign_proc : process(ap_CS_fsm_state3, grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tmp1_we0 <= grp_test_scalaire_Pipeline_loop_1_fu_98_tmp1_we0;
        else 
            tmp1_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
