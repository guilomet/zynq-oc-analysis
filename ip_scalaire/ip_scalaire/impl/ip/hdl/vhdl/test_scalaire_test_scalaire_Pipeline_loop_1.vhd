-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity test_scalaire_test_scalaire_Pipeline_loop_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_AWVALID : OUT STD_LOGIC;
    m_axi_bus_A_AWREADY : IN STD_LOGIC;
    m_axi_bus_A_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_WVALID : OUT STD_LOGIC;
    m_axi_bus_A_WREADY : IN STD_LOGIC;
    m_axi_bus_A_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_WLAST : OUT STD_LOGIC;
    m_axi_bus_A_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_ARVALID : OUT STD_LOGIC;
    m_axi_bus_A_ARREADY : IN STD_LOGIC;
    m_axi_bus_A_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_RVALID : IN STD_LOGIC;
    m_axi_bus_A_RREADY : OUT STD_LOGIC;
    m_axi_bus_A_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_RLAST : IN STD_LOGIC;
    m_axi_bus_A_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_BVALID : IN STD_LOGIC;
    m_axi_bus_A_BREADY : OUT STD_LOGIC;
    m_axi_bus_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    B : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_AWVALID : OUT STD_LOGIC;
    m_axi_bus_B_AWREADY : IN STD_LOGIC;
    m_axi_bus_B_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_WVALID : OUT STD_LOGIC;
    m_axi_bus_B_WREADY : IN STD_LOGIC;
    m_axi_bus_B_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_WLAST : OUT STD_LOGIC;
    m_axi_bus_B_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_ARVALID : OUT STD_LOGIC;
    m_axi_bus_B_ARREADY : IN STD_LOGIC;
    m_axi_bus_B_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_RVALID : IN STD_LOGIC;
    m_axi_bus_B_RREADY : OUT STD_LOGIC;
    m_axi_bus_B_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_RLAST : IN STD_LOGIC;
    m_axi_bus_B_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_BVALID : IN STD_LOGIC;
    m_axi_bus_B_BREADY : OUT STD_LOGIC;
    m_axi_bus_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    tmp1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tmp1_ce0 : OUT STD_LOGIC;
    tmp1_we0 : OUT STD_LOGIC;
    tmp1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tmp1_ce1 : OUT STD_LOGIC;
    tmp1_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of test_scalaire_test_scalaire_Pipeline_loop_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal A_0_vld_reg : STD_LOGIC := '0';
    signal A_0_ack_out : STD_LOGIC;
    signal B_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal B_0_vld_reg : STD_LOGIC := '0';
    signal B_0_ack_out : STD_LOGIC;
    signal bus_A_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal bus_A_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal bus_B_blk_n_AR : STD_LOGIC;
    signal bus_B_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_fu_161_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_320 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln13_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_320_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_320_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_320_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_320_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_320_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_320_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_320_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_320_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_320_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_320_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_320_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_320_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_320_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1_reg_325 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln19_1_reg_330 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln20_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_335_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_A_addr_read_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal bus_B_addr_read_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_addr_reg_372 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_addr_reg_372_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_addr_reg_372_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_addr_reg_372_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_addr_reg_372_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_addr_reg_372_pp0_iter19_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_addr_reg_372_pp0_iter20_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_addr_reg_372_pp0_iter21_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_addr_reg_372_pp0_iter22_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_addr_reg_372_pp0_iter23_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_addr_reg_372_pp0_iter24_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_addr_reg_372_pp0_iter25_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_378_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_378_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_378_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_378_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_378_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_378_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_378_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_378_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_378_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_378_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_22_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal grp_fu_133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal zext_ln15_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln19_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln19_1_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cpt_fu_76 : STD_LOGIC_VECTOR (12 downto 0);
    signal cpt_2_fu_155_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_137_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_165_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln_fu_175_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln19_1_fu_187_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln19_1_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_1_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_2_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_3_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_241_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_133_ce : STD_LOGIC;
    signal grp_fu_137_ce : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component test_scalaire_fadd_32ns_32ns_32_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component test_scalaire_fmul_32ns_32ns_32_7_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_10_full_dsp_1_U1 : component test_scalaire_fadd_32ns_32ns_32_10_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_22_reg_384,
        din1 => p_reg_378,
        ce => grp_fu_133_ce,
        dout => grp_fu_133_p2);

    fmul_32ns_32ns_32_7_max_dsp_1_U2 : component test_scalaire_fmul_32ns_32ns_32_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_137_p0,
        din1 => grp_fu_137_p1,
        ce => grp_fu_137_ce,
        dout => grp_fu_137_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    A_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    B_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    cpt_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                cpt_fu_76 <= ap_const_lv13_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_fu_149_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                cpt_fu_76 <= cpt_2_fu_155_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = A_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = A_0_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = A_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                A_0_data_reg <= A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = B_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = B_0_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = B_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                B_0_data_reg <= B;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_335_pp0_iter24_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_reg_389 <= grp_fu_133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                bus_A_addr_read_reg_352 <= m_axi_bus_A_RDATA;
                bus_B_addr_read_reg_357 <= m_axi_bus_B_RDATA;
                icmp_ln20_reg_335_pp0_iter10_reg <= icmp_ln20_reg_335_pp0_iter9_reg;
                icmp_ln20_reg_335_pp0_iter11_reg <= icmp_ln20_reg_335_pp0_iter10_reg;
                icmp_ln20_reg_335_pp0_iter12_reg <= icmp_ln20_reg_335_pp0_iter11_reg;
                icmp_ln20_reg_335_pp0_iter13_reg <= icmp_ln20_reg_335_pp0_iter12_reg;
                icmp_ln20_reg_335_pp0_iter14_reg <= icmp_ln20_reg_335_pp0_iter13_reg;
                icmp_ln20_reg_335_pp0_iter15_reg <= icmp_ln20_reg_335_pp0_iter14_reg;
                icmp_ln20_reg_335_pp0_iter16_reg <= icmp_ln20_reg_335_pp0_iter15_reg;
                icmp_ln20_reg_335_pp0_iter17_reg <= icmp_ln20_reg_335_pp0_iter16_reg;
                icmp_ln20_reg_335_pp0_iter18_reg <= icmp_ln20_reg_335_pp0_iter17_reg;
                icmp_ln20_reg_335_pp0_iter19_reg <= icmp_ln20_reg_335_pp0_iter18_reg;
                icmp_ln20_reg_335_pp0_iter20_reg <= icmp_ln20_reg_335_pp0_iter19_reg;
                icmp_ln20_reg_335_pp0_iter21_reg <= icmp_ln20_reg_335_pp0_iter20_reg;
                icmp_ln20_reg_335_pp0_iter22_reg <= icmp_ln20_reg_335_pp0_iter21_reg;
                icmp_ln20_reg_335_pp0_iter23_reg <= icmp_ln20_reg_335_pp0_iter22_reg;
                icmp_ln20_reg_335_pp0_iter24_reg <= icmp_ln20_reg_335_pp0_iter23_reg;
                icmp_ln20_reg_335_pp0_iter25_reg <= icmp_ln20_reg_335_pp0_iter24_reg;
                icmp_ln20_reg_335_pp0_iter2_reg <= icmp_ln20_reg_335_pp0_iter1_reg;
                icmp_ln20_reg_335_pp0_iter3_reg <= icmp_ln20_reg_335_pp0_iter2_reg;
                icmp_ln20_reg_335_pp0_iter4_reg <= icmp_ln20_reg_335_pp0_iter3_reg;
                icmp_ln20_reg_335_pp0_iter5_reg <= icmp_ln20_reg_335_pp0_iter4_reg;
                icmp_ln20_reg_335_pp0_iter6_reg <= icmp_ln20_reg_335_pp0_iter5_reg;
                icmp_ln20_reg_335_pp0_iter7_reg <= icmp_ln20_reg_335_pp0_iter6_reg;
                icmp_ln20_reg_335_pp0_iter8_reg <= icmp_ln20_reg_335_pp0_iter7_reg;
                icmp_ln20_reg_335_pp0_iter9_reg <= icmp_ln20_reg_335_pp0_iter8_reg;
                j_reg_320_pp0_iter10_reg <= j_reg_320_pp0_iter9_reg;
                j_reg_320_pp0_iter11_reg <= j_reg_320_pp0_iter10_reg;
                j_reg_320_pp0_iter12_reg <= j_reg_320_pp0_iter11_reg;
                j_reg_320_pp0_iter13_reg <= j_reg_320_pp0_iter12_reg;
                j_reg_320_pp0_iter2_reg <= j_reg_320_pp0_iter1_reg;
                j_reg_320_pp0_iter3_reg <= j_reg_320_pp0_iter2_reg;
                j_reg_320_pp0_iter4_reg <= j_reg_320_pp0_iter3_reg;
                j_reg_320_pp0_iter5_reg <= j_reg_320_pp0_iter4_reg;
                j_reg_320_pp0_iter6_reg <= j_reg_320_pp0_iter5_reg;
                j_reg_320_pp0_iter7_reg <= j_reg_320_pp0_iter6_reg;
                j_reg_320_pp0_iter8_reg <= j_reg_320_pp0_iter7_reg;
                j_reg_320_pp0_iter9_reg <= j_reg_320_pp0_iter8_reg;
                p_reg_378 <= grp_fu_137_p2;
                p_reg_378_pp0_iter16_reg <= p_reg_378;
                p_reg_378_pp0_iter17_reg <= p_reg_378_pp0_iter16_reg;
                p_reg_378_pp0_iter18_reg <= p_reg_378_pp0_iter17_reg;
                p_reg_378_pp0_iter19_reg <= p_reg_378_pp0_iter18_reg;
                p_reg_378_pp0_iter20_reg <= p_reg_378_pp0_iter19_reg;
                p_reg_378_pp0_iter21_reg <= p_reg_378_pp0_iter20_reg;
                p_reg_378_pp0_iter22_reg <= p_reg_378_pp0_iter21_reg;
                p_reg_378_pp0_iter23_reg <= p_reg_378_pp0_iter22_reg;
                p_reg_378_pp0_iter24_reg <= p_reg_378_pp0_iter23_reg;
                p_reg_378_pp0_iter25_reg <= p_reg_378_pp0_iter24_reg;
                tmp1_addr_reg_372 <= zext_ln15_fu_290_p1(4 - 1 downto 0);
                tmp1_addr_reg_372_pp0_iter15_reg <= tmp1_addr_reg_372;
                tmp1_addr_reg_372_pp0_iter16_reg <= tmp1_addr_reg_372_pp0_iter15_reg;
                tmp1_addr_reg_372_pp0_iter17_reg <= tmp1_addr_reg_372_pp0_iter16_reg;
                tmp1_addr_reg_372_pp0_iter18_reg <= tmp1_addr_reg_372_pp0_iter17_reg;
                tmp1_addr_reg_372_pp0_iter19_reg <= tmp1_addr_reg_372_pp0_iter18_reg;
                tmp1_addr_reg_372_pp0_iter20_reg <= tmp1_addr_reg_372_pp0_iter19_reg;
                tmp1_addr_reg_372_pp0_iter21_reg <= tmp1_addr_reg_372_pp0_iter20_reg;
                tmp1_addr_reg_372_pp0_iter22_reg <= tmp1_addr_reg_372_pp0_iter21_reg;
                tmp1_addr_reg_372_pp0_iter23_reg <= tmp1_addr_reg_372_pp0_iter22_reg;
                tmp1_addr_reg_372_pp0_iter24_reg <= tmp1_addr_reg_372_pp0_iter23_reg;
                tmp1_addr_reg_372_pp0_iter25_reg <= tmp1_addr_reg_372_pp0_iter24_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (icmp_ln20_reg_335_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_22_reg_384 <= tmp1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_149_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln20_reg_335 <= icmp_ln20_fu_251_p2;
                j_reg_320 <= j_fu_161_p1;
                trunc_ln19_1_reg_330 <= add_ln19_3_fu_225_p2(31 downto 2);
                trunc_ln1_reg_325 <= add_ln19_1_fu_204_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln20_reg_335_pp0_iter1_reg <= icmp_ln20_reg_335;
                j_reg_320_pp0_iter1_reg <= j_reg_320;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, icmp_ln13_fu_149_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_fu_149_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_fu_149_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    A_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            A_0_ack_out <= ap_const_logic_1;
        else 
            A_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    B_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            B_0_ack_out <= ap_const_logic_1;
        else 
            B_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    add_ln19_1_fu_204_p2 <= std_logic_vector(unsigned(add_ln19_fu_199_p2) + unsigned(zext_ln19_fu_183_p1));
    add_ln19_2_fu_220_p2 <= std_logic_vector(unsigned(zext_ln19_1_fu_195_p1) + unsigned(B_0_data_reg));
    add_ln19_3_fu_225_p2 <= std_logic_vector(unsigned(add_ln19_2_fu_220_p2) + unsigned(zext_ln19_fu_183_p1));
    add_ln19_fu_199_p2 <= std_logic_vector(unsigned(zext_ln19_1_fu_195_p1) + unsigned(A_0_data_reg));
    and_ln_fu_175_p3 <= (tmp_fu_165_p4 & ap_const_lv6_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state30 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_bus_A_RVALID, m_axi_bus_B_RVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and ((m_axi_bus_A_RVALID = ap_const_logic_0) or (m_axi_bus_B_RVALID = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_bus_A_RVALID, m_axi_bus_B_RVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and ((m_axi_bus_A_RVALID = ap_const_logic_0) or (m_axi_bus_B_RVALID = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter8_assign_proc : process(m_axi_bus_A_RVALID, m_axi_bus_B_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter8 <= ((m_axi_bus_A_RVALID = ap_const_logic_0) or (m_axi_bus_B_RVALID = ap_const_logic_0));
    end process;

        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_bus_A_ARREADY, m_axi_bus_B_ARREADY)
    begin
                ap_block_state4_io <= ((m_axi_bus_A_ARREADY = ap_const_logic_0) or (m_axi_bus_B_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln13_fu_149_p2)
    begin
        if ((icmp_ln13_fu_149_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bus_A_blk_n_AR_assign_proc : process(m_axi_bus_A_ARREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            bus_A_blk_n_AR <= m_axi_bus_A_ARREADY;
        else 
            bus_A_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    bus_A_blk_n_R_assign_proc : process(m_axi_bus_A_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            bus_A_blk_n_R <= m_axi_bus_A_RVALID;
        else 
            bus_A_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    bus_B_blk_n_AR_assign_proc : process(m_axi_bus_B_ARREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            bus_B_blk_n_AR <= m_axi_bus_B_ARREADY;
        else 
            bus_B_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    bus_B_blk_n_R_assign_proc : process(m_axi_bus_B_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            bus_B_blk_n_R <= m_axi_bus_B_RVALID;
        else 
            bus_B_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    cpt_2_fu_155_p2 <= std_logic_vector(unsigned(cpt_fu_76) + unsigned(ap_const_lv13_1));

    grp_fu_133_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_133_ce <= ap_const_logic_1;
        else 
            grp_fu_133_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_137_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_137_ce <= ap_const_logic_1;
        else 
            grp_fu_137_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_137_p0 <= bus_A_addr_read_reg_352;
    grp_fu_137_p1 <= bus_B_addr_read_reg_357;
    icmp_ln13_fu_149_p2 <= "1" when (cpt_fu_76 = ap_const_lv13_1000) else "0";
    icmp_ln20_fu_251_p2 <= "1" when (tmp_1_fu_241_p4 = ap_const_lv9_0) else "0";
    j_fu_161_p1 <= cpt_fu_76(4 - 1 downto 0);
    m_axi_bus_A_ARADDR <= sext_ln19_fu_262_p1;
    m_axi_bus_A_ARBURST <= ap_const_lv2_0;
    m_axi_bus_A_ARCACHE <= ap_const_lv4_0;
    m_axi_bus_A_ARID <= ap_const_lv1_0;
    m_axi_bus_A_ARLEN <= ap_const_lv32_1;
    m_axi_bus_A_ARLOCK <= ap_const_lv2_0;
    m_axi_bus_A_ARPROT <= ap_const_lv3_0;
    m_axi_bus_A_ARQOS <= ap_const_lv4_0;
    m_axi_bus_A_ARREGION <= ap_const_lv4_0;
    m_axi_bus_A_ARSIZE <= ap_const_lv3_0;
    m_axi_bus_A_ARUSER <= ap_const_lv1_0;

    m_axi_bus_A_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            m_axi_bus_A_ARVALID <= ap_const_logic_1;
        else 
            m_axi_bus_A_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bus_A_AWADDR <= ap_const_lv32_0;
    m_axi_bus_A_AWBURST <= ap_const_lv2_0;
    m_axi_bus_A_AWCACHE <= ap_const_lv4_0;
    m_axi_bus_A_AWID <= ap_const_lv1_0;
    m_axi_bus_A_AWLEN <= ap_const_lv32_0;
    m_axi_bus_A_AWLOCK <= ap_const_lv2_0;
    m_axi_bus_A_AWPROT <= ap_const_lv3_0;
    m_axi_bus_A_AWQOS <= ap_const_lv4_0;
    m_axi_bus_A_AWREGION <= ap_const_lv4_0;
    m_axi_bus_A_AWSIZE <= ap_const_lv3_0;
    m_axi_bus_A_AWUSER <= ap_const_lv1_0;
    m_axi_bus_A_AWVALID <= ap_const_logic_0;
    m_axi_bus_A_BREADY <= ap_const_logic_0;

    m_axi_bus_A_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_bus_A_RREADY <= ap_const_logic_1;
        else 
            m_axi_bus_A_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bus_A_WDATA <= ap_const_lv32_0;
    m_axi_bus_A_WID <= ap_const_lv1_0;
    m_axi_bus_A_WLAST <= ap_const_logic_0;
    m_axi_bus_A_WSTRB <= ap_const_lv4_0;
    m_axi_bus_A_WUSER <= ap_const_lv1_0;
    m_axi_bus_A_WVALID <= ap_const_logic_0;
    m_axi_bus_B_ARADDR <= sext_ln19_1_fu_272_p1;
    m_axi_bus_B_ARBURST <= ap_const_lv2_0;
    m_axi_bus_B_ARCACHE <= ap_const_lv4_0;
    m_axi_bus_B_ARID <= ap_const_lv1_0;
    m_axi_bus_B_ARLEN <= ap_const_lv32_1;
    m_axi_bus_B_ARLOCK <= ap_const_lv2_0;
    m_axi_bus_B_ARPROT <= ap_const_lv3_0;
    m_axi_bus_B_ARQOS <= ap_const_lv4_0;
    m_axi_bus_B_ARREGION <= ap_const_lv4_0;
    m_axi_bus_B_ARSIZE <= ap_const_lv3_0;
    m_axi_bus_B_ARUSER <= ap_const_lv1_0;

    m_axi_bus_B_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            m_axi_bus_B_ARVALID <= ap_const_logic_1;
        else 
            m_axi_bus_B_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bus_B_AWADDR <= ap_const_lv32_0;
    m_axi_bus_B_AWBURST <= ap_const_lv2_0;
    m_axi_bus_B_AWCACHE <= ap_const_lv4_0;
    m_axi_bus_B_AWID <= ap_const_lv1_0;
    m_axi_bus_B_AWLEN <= ap_const_lv32_0;
    m_axi_bus_B_AWLOCK <= ap_const_lv2_0;
    m_axi_bus_B_AWPROT <= ap_const_lv3_0;
    m_axi_bus_B_AWQOS <= ap_const_lv4_0;
    m_axi_bus_B_AWREGION <= ap_const_lv4_0;
    m_axi_bus_B_AWSIZE <= ap_const_lv3_0;
    m_axi_bus_B_AWUSER <= ap_const_lv1_0;
    m_axi_bus_B_AWVALID <= ap_const_logic_0;
    m_axi_bus_B_BREADY <= ap_const_logic_0;

    m_axi_bus_B_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_bus_B_RREADY <= ap_const_logic_1;
        else 
            m_axi_bus_B_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bus_B_WDATA <= ap_const_lv32_0;
    m_axi_bus_B_WID <= ap_const_lv1_0;
    m_axi_bus_B_WLAST <= ap_const_logic_0;
    m_axi_bus_B_WSTRB <= ap_const_lv4_0;
    m_axi_bus_B_WUSER <= ap_const_lv1_0;
    m_axi_bus_B_WVALID <= ap_const_logic_0;
        sext_ln19_1_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_1_reg_330),32));

        sext_ln19_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_325),32));

    shl_ln19_1_fu_187_p3 <= (j_fu_161_p1 & ap_const_lv2_0);
    tmp1_address0 <= tmp1_addr_reg_372_pp0_iter25_reg;
    tmp1_address1 <= zext_ln15_fu_290_p1(4 - 1 downto 0);

    tmp1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp1_ce0 <= ap_const_logic_1;
        else 
            tmp1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp1_ce1 <= ap_const_logic_1;
        else 
            tmp1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_d0 <= 
        p_reg_378_pp0_iter25_reg when (icmp_ln20_reg_335_pp0_iter25_reg(0) = '1') else 
        add_reg_389;

    tmp1_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp1_we0 <= ap_const_logic_1;
        else 
            tmp1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_241_p4 <= cpt_fu_76(12 downto 4);
    tmp_fu_165_p4 <= cpt_fu_76(11 downto 4);
    zext_ln15_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_320_pp0_iter13_reg),32));
    zext_ln19_1_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln19_1_fu_187_p3),32));
    zext_ln19_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_175_p3),32));
end behav;
