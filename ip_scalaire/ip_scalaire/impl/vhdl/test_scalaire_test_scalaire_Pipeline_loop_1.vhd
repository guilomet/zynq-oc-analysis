-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity test_scalaire_test_scalaire_Pipeline_loop_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_bus_B_AWVALID : OUT STD_LOGIC;
    m_axi_bus_B_AWREADY : IN STD_LOGIC;
    m_axi_bus_B_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_WVALID : OUT STD_LOGIC;
    m_axi_bus_B_WREADY : IN STD_LOGIC;
    m_axi_bus_B_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_WLAST : OUT STD_LOGIC;
    m_axi_bus_B_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_ARVALID : OUT STD_LOGIC;
    m_axi_bus_B_ARREADY : IN STD_LOGIC;
    m_axi_bus_B_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_RVALID : IN STD_LOGIC;
    m_axi_bus_B_RREADY : OUT STD_LOGIC;
    m_axi_bus_B_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_RLAST : IN STD_LOGIC;
    m_axi_bus_B_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_BVALID : IN STD_LOGIC;
    m_axi_bus_B_BREADY : OUT STD_LOGIC;
    m_axi_bus_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln15_1 : IN STD_LOGIC_VECTOR (29 downto 0);
    m_axi_bus_A_AWVALID : OUT STD_LOGIC;
    m_axi_bus_A_AWREADY : IN STD_LOGIC;
    m_axi_bus_A_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_WVALID : OUT STD_LOGIC;
    m_axi_bus_A_WREADY : IN STD_LOGIC;
    m_axi_bus_A_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_WLAST : OUT STD_LOGIC;
    m_axi_bus_A_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_ARVALID : OUT STD_LOGIC;
    m_axi_bus_A_ARREADY : IN STD_LOGIC;
    m_axi_bus_A_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_RVALID : IN STD_LOGIC;
    m_axi_bus_A_RREADY : OUT STD_LOGIC;
    m_axi_bus_A_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_RLAST : IN STD_LOGIC;
    m_axi_bus_A_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_BVALID : IN STD_LOGIC;
    m_axi_bus_A_BREADY : OUT STD_LOGIC;
    m_axi_bus_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln15 : IN STD_LOGIC_VECTOR (29 downto 0);
    tmp1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of test_scalaire_test_scalaire_Pipeline_loop_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_state30_pp0_stage14_iter1 : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal icmp_ln15_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage14 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal bus_B_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal bus_A_blk_n_R : STD_LOGIC;
    signal reg_99 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state33_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_103 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_91_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_107 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage9_iter1 : BOOLEAN;
    signal ap_block_state40_pp0_stage9_iter2 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_state39_pp0_stage8_iter2 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln15_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_219_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_fu_139_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln15_reg_223 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln19_fu_161_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_2_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_1_fu_171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state34_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal bitcast_ln19_3_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_95_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_1_reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_state26_pp0_stage10_iter1 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal tmp1_fu_54 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal indvar_fu_58 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage9_01001 : BOOLEAN;
    signal grp_fu_91_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_91_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal grp_fu_95_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_95_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal grp_fu_91_ce : STD_LOGIC;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state35_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state36_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state37_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_state38_pp0_stage7_iter2 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage11_iter1 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_state28_pp0_stage12_iter1 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_state29_pp0_stage13_iter1 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal grp_fu_95_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage9 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component test_scalaire_fadd_32ns_32ns_32_14_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component test_scalaire_fmul_32ns_32ns_32_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component test_scalaire_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_14_no_dsp_1_U1 : component test_scalaire_fadd_32ns_32ns_32_14_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_91_p0,
        din1 => grp_fu_91_p1,
        ce => grp_fu_91_ce,
        dout => grp_fu_91_p2);

    fmul_32ns_32ns_32_8_max_dsp_1_U2 : component test_scalaire_fmul_32ns_32ns_32_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_95_p0,
        din1 => grp_fu_95_p1,
        ce => grp_fu_95_ce,
        dout => grp_fu_95_p2);

    flow_control_loop_pipe_sequential_init_U : component test_scalaire_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage14,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage14)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage9))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    indvar_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_fu_58 <= ap_const_lv8_0;
            elsif (((icmp_ln15_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvar_fu_58 <= add_ln15_reg_223;
            end if; 
        end if;
    end process;

    tmp1_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp1_fu_54 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                tmp1_fu_54 <= reg_107;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln15_reg_223 <= add_ln15_fu_139_p2;
                icmp_ln15_reg_219 <= icmp_ln15_fu_133_p2;
                icmp_ln15_reg_219_pp0_iter1_reg <= icmp_ln15_reg_219;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln15_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln15_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_103 <= m_axi_bus_B_RDATA;
                reg_99 <= m_axi_bus_A_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then
                reg_107 <= grp_fu_91_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                tmp2_1_reg_263 <= grp_fu_95_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                tmp2_reg_258 <= grp_fu_95_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage14_subdone, ap_block_pp0_stage9_subdone, ap_condition_exit_pp0_iter1_stage9, ap_idle_pp0_0to0, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage9))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln15_fu_139_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_load) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln15_reg_219, m_axi_bus_B_RVALID, m_axi_bus_A_RVALID)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln15_reg_219 = ap_const_lv1_0) and (m_axi_bus_B_RVALID = ap_const_logic_0)) or ((icmp_ln15_reg_219 = ap_const_lv1_0) and (m_axi_bus_A_RVALID = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln15_reg_219, m_axi_bus_B_RVALID, m_axi_bus_A_RVALID)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln15_reg_219 = ap_const_lv1_0) and (m_axi_bus_B_RVALID = ap_const_logic_0)) or ((icmp_ln15_reg_219 = ap_const_lv1_0) and (m_axi_bus_A_RVALID = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln15_reg_219, m_axi_bus_B_RVALID, m_axi_bus_A_RVALID)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln15_reg_219 = ap_const_lv1_0) and (m_axi_bus_B_RVALID = ap_const_logic_0)) or ((icmp_ln15_reg_219 = ap_const_lv1_0) and (m_axi_bus_A_RVALID = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln15_reg_219, m_axi_bus_B_RVALID, m_axi_bus_A_RVALID)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln15_reg_219 = ap_const_lv1_0) and (m_axi_bus_B_RVALID = ap_const_logic_0)) or ((icmp_ln15_reg_219 = ap_const_lv1_0) and (m_axi_bus_A_RVALID = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage9_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage10_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage11_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage12_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage13_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage1_iter0_assign_proc : process(icmp_ln15_reg_219, m_axi_bus_B_RVALID, m_axi_bus_A_RVALID)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (((icmp_ln15_reg_219 = ap_const_lv1_0) and (m_axi_bus_B_RVALID = ap_const_logic_0)) or ((icmp_ln15_reg_219 = ap_const_lv1_0) and (m_axi_bus_A_RVALID = ap_const_logic_0)));
    end process;

        ap_block_state30_pp0_stage14_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage7_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage8_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage2_iter0_assign_proc : process(icmp_ln15_reg_219, m_axi_bus_B_RVALID, m_axi_bus_A_RVALID)
    begin
                ap_block_state3_pp0_stage2_iter0 <= (((icmp_ln15_reg_219 = ap_const_lv1_0) and (m_axi_bus_B_RVALID = ap_const_logic_0)) or ((icmp_ln15_reg_219 = ap_const_lv1_0) and (m_axi_bus_A_RVALID = ap_const_logic_0)));
    end process;

        ap_block_state40_pp0_stage9_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage14_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_subdone, icmp_ln15_reg_219)
    begin
        if (((icmp_ln15_reg_219 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            ap_condition_exit_pp0_iter0_stage14 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage9_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage9, icmp_ln15_reg_219_pp0_iter1_reg, ap_block_pp0_stage9_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln15_reg_219_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            ap_condition_exit_pp0_iter1_stage9 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage14;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, indvar_fu_58, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_load <= indvar_fu_58;
        end if; 
    end process;

    bitcast_ln19_1_fu_171_p1 <= reg_99;
    bitcast_ln19_2_fu_166_p1 <= reg_103;
    bitcast_ln19_3_fu_176_p1 <= reg_103;
    bitcast_ln19_fu_161_p1 <= reg_99;

    bus_A_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln15_reg_219, m_axi_bus_A_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if ((((icmp_ln15_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln15_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            bus_A_blk_n_R <= m_axi_bus_A_RVALID;
        else 
            bus_A_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    bus_B_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln15_reg_219, m_axi_bus_B_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if ((((icmp_ln15_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln15_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            bus_B_blk_n_R <= m_axi_bus_B_RVALID;
        else 
            bus_B_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_91_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_91_ce <= ap_const_logic_1;
        else 
            grp_fu_91_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_91_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, reg_107, tmp2_reg_258, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_91_p0 <= reg_107;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            grp_fu_91_p0 <= tmp2_reg_258;
        else 
            grp_fu_91_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_91_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, tmp2_1_reg_263, ap_CS_fsm_pp0_stage10, tmp1_fu_54, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_91_p1 <= tmp1_fu_54;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            grp_fu_91_p1 <= tmp2_1_reg_263;
        else 
            grp_fu_91_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_95_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_95_ce <= ap_const_logic_1;
        else 
            grp_fu_95_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_95_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, bitcast_ln19_fu_161_p1, bitcast_ln19_1_fu_171_p1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_95_p0 <= bitcast_ln19_1_fu_171_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_95_p0 <= bitcast_ln19_fu_161_p1;
            else 
                grp_fu_95_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_95_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_95_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, bitcast_ln19_2_fu_166_p1, ap_CS_fsm_pp0_stage3, bitcast_ln19_3_fu_176_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_95_p1 <= bitcast_ln19_3_fu_176_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_95_p1 <= bitcast_ln19_2_fu_166_p1;
            else 
                grp_fu_95_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_95_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln15_fu_133_p2 <= "1" when (ap_sig_allocacmp_indvar_load = ap_const_lv8_80) else "0";
    m_axi_bus_A_ARADDR <= ap_const_lv32_0;
    m_axi_bus_A_ARBURST <= ap_const_lv2_0;
    m_axi_bus_A_ARCACHE <= ap_const_lv4_0;
    m_axi_bus_A_ARID <= ap_const_lv1_0;
    m_axi_bus_A_ARLEN <= ap_const_lv32_0;
    m_axi_bus_A_ARLOCK <= ap_const_lv2_0;
    m_axi_bus_A_ARPROT <= ap_const_lv3_0;
    m_axi_bus_A_ARQOS <= ap_const_lv4_0;
    m_axi_bus_A_ARREGION <= ap_const_lv4_0;
    m_axi_bus_A_ARSIZE <= ap_const_lv3_0;
    m_axi_bus_A_ARUSER <= ap_const_lv1_0;
    m_axi_bus_A_ARVALID <= ap_const_logic_0;
    m_axi_bus_A_AWADDR <= ap_const_lv32_0;
    m_axi_bus_A_AWBURST <= ap_const_lv2_0;
    m_axi_bus_A_AWCACHE <= ap_const_lv4_0;
    m_axi_bus_A_AWID <= ap_const_lv1_0;
    m_axi_bus_A_AWLEN <= ap_const_lv32_0;
    m_axi_bus_A_AWLOCK <= ap_const_lv2_0;
    m_axi_bus_A_AWPROT <= ap_const_lv3_0;
    m_axi_bus_A_AWQOS <= ap_const_lv4_0;
    m_axi_bus_A_AWREGION <= ap_const_lv4_0;
    m_axi_bus_A_AWSIZE <= ap_const_lv3_0;
    m_axi_bus_A_AWUSER <= ap_const_lv1_0;
    m_axi_bus_A_AWVALID <= ap_const_logic_0;
    m_axi_bus_A_BREADY <= ap_const_logic_0;

    m_axi_bus_A_RREADY_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln15_reg_219, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((icmp_ln15_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln15_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            m_axi_bus_A_RREADY <= ap_const_logic_1;
        else 
            m_axi_bus_A_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bus_A_WDATA <= ap_const_lv32_0;
    m_axi_bus_A_WID <= ap_const_lv1_0;
    m_axi_bus_A_WLAST <= ap_const_logic_0;
    m_axi_bus_A_WSTRB <= ap_const_lv4_0;
    m_axi_bus_A_WUSER <= ap_const_lv1_0;
    m_axi_bus_A_WVALID <= ap_const_logic_0;
    m_axi_bus_B_ARADDR <= ap_const_lv32_0;
    m_axi_bus_B_ARBURST <= ap_const_lv2_0;
    m_axi_bus_B_ARCACHE <= ap_const_lv4_0;
    m_axi_bus_B_ARID <= ap_const_lv1_0;
    m_axi_bus_B_ARLEN <= ap_const_lv32_0;
    m_axi_bus_B_ARLOCK <= ap_const_lv2_0;
    m_axi_bus_B_ARPROT <= ap_const_lv3_0;
    m_axi_bus_B_ARQOS <= ap_const_lv4_0;
    m_axi_bus_B_ARREGION <= ap_const_lv4_0;
    m_axi_bus_B_ARSIZE <= ap_const_lv3_0;
    m_axi_bus_B_ARUSER <= ap_const_lv1_0;
    m_axi_bus_B_ARVALID <= ap_const_logic_0;
    m_axi_bus_B_AWADDR <= ap_const_lv32_0;
    m_axi_bus_B_AWBURST <= ap_const_lv2_0;
    m_axi_bus_B_AWCACHE <= ap_const_lv4_0;
    m_axi_bus_B_AWID <= ap_const_lv1_0;
    m_axi_bus_B_AWLEN <= ap_const_lv32_0;
    m_axi_bus_B_AWLOCK <= ap_const_lv2_0;
    m_axi_bus_B_AWPROT <= ap_const_lv3_0;
    m_axi_bus_B_AWQOS <= ap_const_lv4_0;
    m_axi_bus_B_AWREGION <= ap_const_lv4_0;
    m_axi_bus_B_AWSIZE <= ap_const_lv3_0;
    m_axi_bus_B_AWUSER <= ap_const_lv1_0;
    m_axi_bus_B_AWVALID <= ap_const_logic_0;
    m_axi_bus_B_BREADY <= ap_const_logic_0;

    m_axi_bus_B_RREADY_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln15_reg_219, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((icmp_ln15_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln15_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            m_axi_bus_B_RREADY <= ap_const_logic_1;
        else 
            m_axi_bus_B_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bus_B_WDATA <= ap_const_lv32_0;
    m_axi_bus_B_WID <= ap_const_lv1_0;
    m_axi_bus_B_WLAST <= ap_const_logic_0;
    m_axi_bus_B_WSTRB <= ap_const_lv4_0;
    m_axi_bus_B_WUSER <= ap_const_lv1_0;
    m_axi_bus_B_WVALID <= ap_const_logic_0;
    tmp1_out <= tmp1_fu_54;

    tmp1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, icmp_ln15_reg_219_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (icmp_ln15_reg_219_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            tmp1_out_ap_vld <= ap_const_logic_1;
        else 
            tmp1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
