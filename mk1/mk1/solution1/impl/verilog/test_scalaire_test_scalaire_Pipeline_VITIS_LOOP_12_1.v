// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module test_scalaire_test_scalaire_Pipeline_VITIS_LOOP_12_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_bus_A_AWVALID,
        m_axi_bus_A_AWREADY,
        m_axi_bus_A_AWADDR,
        m_axi_bus_A_AWID,
        m_axi_bus_A_AWLEN,
        m_axi_bus_A_AWSIZE,
        m_axi_bus_A_AWBURST,
        m_axi_bus_A_AWLOCK,
        m_axi_bus_A_AWCACHE,
        m_axi_bus_A_AWPROT,
        m_axi_bus_A_AWQOS,
        m_axi_bus_A_AWREGION,
        m_axi_bus_A_AWUSER,
        m_axi_bus_A_WVALID,
        m_axi_bus_A_WREADY,
        m_axi_bus_A_WDATA,
        m_axi_bus_A_WSTRB,
        m_axi_bus_A_WLAST,
        m_axi_bus_A_WID,
        m_axi_bus_A_WUSER,
        m_axi_bus_A_ARVALID,
        m_axi_bus_A_ARREADY,
        m_axi_bus_A_ARADDR,
        m_axi_bus_A_ARID,
        m_axi_bus_A_ARLEN,
        m_axi_bus_A_ARSIZE,
        m_axi_bus_A_ARBURST,
        m_axi_bus_A_ARLOCK,
        m_axi_bus_A_ARCACHE,
        m_axi_bus_A_ARPROT,
        m_axi_bus_A_ARQOS,
        m_axi_bus_A_ARREGION,
        m_axi_bus_A_ARUSER,
        m_axi_bus_A_RVALID,
        m_axi_bus_A_RREADY,
        m_axi_bus_A_RDATA,
        m_axi_bus_A_RLAST,
        m_axi_bus_A_RID,
        m_axi_bus_A_RUSER,
        m_axi_bus_A_RRESP,
        m_axi_bus_A_BVALID,
        m_axi_bus_A_BREADY,
        m_axi_bus_A_BRESP,
        m_axi_bus_A_BID,
        m_axi_bus_A_BUSER,
        m_axi_bus_B_AWVALID,
        m_axi_bus_B_AWREADY,
        m_axi_bus_B_AWADDR,
        m_axi_bus_B_AWID,
        m_axi_bus_B_AWLEN,
        m_axi_bus_B_AWSIZE,
        m_axi_bus_B_AWBURST,
        m_axi_bus_B_AWLOCK,
        m_axi_bus_B_AWCACHE,
        m_axi_bus_B_AWPROT,
        m_axi_bus_B_AWQOS,
        m_axi_bus_B_AWREGION,
        m_axi_bus_B_AWUSER,
        m_axi_bus_B_WVALID,
        m_axi_bus_B_WREADY,
        m_axi_bus_B_WDATA,
        m_axi_bus_B_WSTRB,
        m_axi_bus_B_WLAST,
        m_axi_bus_B_WID,
        m_axi_bus_B_WUSER,
        m_axi_bus_B_ARVALID,
        m_axi_bus_B_ARREADY,
        m_axi_bus_B_ARADDR,
        m_axi_bus_B_ARID,
        m_axi_bus_B_ARLEN,
        m_axi_bus_B_ARSIZE,
        m_axi_bus_B_ARBURST,
        m_axi_bus_B_ARLOCK,
        m_axi_bus_B_ARCACHE,
        m_axi_bus_B_ARPROT,
        m_axi_bus_B_ARQOS,
        m_axi_bus_B_ARREGION,
        m_axi_bus_B_ARUSER,
        m_axi_bus_B_RVALID,
        m_axi_bus_B_RREADY,
        m_axi_bus_B_RDATA,
        m_axi_bus_B_RLAST,
        m_axi_bus_B_RID,
        m_axi_bus_B_RUSER,
        m_axi_bus_B_RRESP,
        m_axi_bus_B_BVALID,
        m_axi_bus_B_BREADY,
        m_axi_bus_B_BRESP,
        m_axi_bus_B_BID,
        m_axi_bus_B_BUSER,
        bitcast_ln18,
        sext_ln12_1,
        sext_ln12,
        tmp2_0_out,
        tmp2_0_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 32'd1;
parameter    ap_ST_fsm_pp0_stage1 = 32'd2;
parameter    ap_ST_fsm_pp0_stage2 = 32'd4;
parameter    ap_ST_fsm_pp0_stage3 = 32'd8;
parameter    ap_ST_fsm_pp0_stage4 = 32'd16;
parameter    ap_ST_fsm_pp0_stage5 = 32'd32;
parameter    ap_ST_fsm_pp0_stage6 = 32'd64;
parameter    ap_ST_fsm_pp0_stage7 = 32'd128;
parameter    ap_ST_fsm_pp0_stage8 = 32'd256;
parameter    ap_ST_fsm_pp0_stage9 = 32'd512;
parameter    ap_ST_fsm_pp0_stage10 = 32'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 32'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 32'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 32'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 32'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 32'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 32'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 32'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 32'd262144;
parameter    ap_ST_fsm_pp0_stage19 = 32'd524288;
parameter    ap_ST_fsm_pp0_stage20 = 32'd1048576;
parameter    ap_ST_fsm_pp0_stage21 = 32'd2097152;
parameter    ap_ST_fsm_pp0_stage22 = 32'd4194304;
parameter    ap_ST_fsm_pp0_stage23 = 32'd8388608;
parameter    ap_ST_fsm_pp0_stage24 = 32'd16777216;
parameter    ap_ST_fsm_pp0_stage25 = 32'd33554432;
parameter    ap_ST_fsm_pp0_stage26 = 32'd67108864;
parameter    ap_ST_fsm_pp0_stage27 = 32'd134217728;
parameter    ap_ST_fsm_pp0_stage28 = 32'd268435456;
parameter    ap_ST_fsm_pp0_stage29 = 32'd536870912;
parameter    ap_ST_fsm_pp0_stage30 = 32'd1073741824;
parameter    ap_ST_fsm_pp0_stage31 = 32'd2147483648;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_bus_A_AWVALID;
input   m_axi_bus_A_AWREADY;
output  [31:0] m_axi_bus_A_AWADDR;
output  [0:0] m_axi_bus_A_AWID;
output  [31:0] m_axi_bus_A_AWLEN;
output  [2:0] m_axi_bus_A_AWSIZE;
output  [1:0] m_axi_bus_A_AWBURST;
output  [1:0] m_axi_bus_A_AWLOCK;
output  [3:0] m_axi_bus_A_AWCACHE;
output  [2:0] m_axi_bus_A_AWPROT;
output  [3:0] m_axi_bus_A_AWQOS;
output  [3:0] m_axi_bus_A_AWREGION;
output  [0:0] m_axi_bus_A_AWUSER;
output   m_axi_bus_A_WVALID;
input   m_axi_bus_A_WREADY;
output  [31:0] m_axi_bus_A_WDATA;
output  [3:0] m_axi_bus_A_WSTRB;
output   m_axi_bus_A_WLAST;
output  [0:0] m_axi_bus_A_WID;
output  [0:0] m_axi_bus_A_WUSER;
output   m_axi_bus_A_ARVALID;
input   m_axi_bus_A_ARREADY;
output  [31:0] m_axi_bus_A_ARADDR;
output  [0:0] m_axi_bus_A_ARID;
output  [31:0] m_axi_bus_A_ARLEN;
output  [2:0] m_axi_bus_A_ARSIZE;
output  [1:0] m_axi_bus_A_ARBURST;
output  [1:0] m_axi_bus_A_ARLOCK;
output  [3:0] m_axi_bus_A_ARCACHE;
output  [2:0] m_axi_bus_A_ARPROT;
output  [3:0] m_axi_bus_A_ARQOS;
output  [3:0] m_axi_bus_A_ARREGION;
output  [0:0] m_axi_bus_A_ARUSER;
input   m_axi_bus_A_RVALID;
output   m_axi_bus_A_RREADY;
input  [31:0] m_axi_bus_A_RDATA;
input   m_axi_bus_A_RLAST;
input  [0:0] m_axi_bus_A_RID;
input  [0:0] m_axi_bus_A_RUSER;
input  [1:0] m_axi_bus_A_RRESP;
input   m_axi_bus_A_BVALID;
output   m_axi_bus_A_BREADY;
input  [1:0] m_axi_bus_A_BRESP;
input  [0:0] m_axi_bus_A_BID;
input  [0:0] m_axi_bus_A_BUSER;
output   m_axi_bus_B_AWVALID;
input   m_axi_bus_B_AWREADY;
output  [31:0] m_axi_bus_B_AWADDR;
output  [0:0] m_axi_bus_B_AWID;
output  [31:0] m_axi_bus_B_AWLEN;
output  [2:0] m_axi_bus_B_AWSIZE;
output  [1:0] m_axi_bus_B_AWBURST;
output  [1:0] m_axi_bus_B_AWLOCK;
output  [3:0] m_axi_bus_B_AWCACHE;
output  [2:0] m_axi_bus_B_AWPROT;
output  [3:0] m_axi_bus_B_AWQOS;
output  [3:0] m_axi_bus_B_AWREGION;
output  [0:0] m_axi_bus_B_AWUSER;
output   m_axi_bus_B_WVALID;
input   m_axi_bus_B_WREADY;
output  [31:0] m_axi_bus_B_WDATA;
output  [3:0] m_axi_bus_B_WSTRB;
output   m_axi_bus_B_WLAST;
output  [0:0] m_axi_bus_B_WID;
output  [0:0] m_axi_bus_B_WUSER;
output   m_axi_bus_B_ARVALID;
input   m_axi_bus_B_ARREADY;
output  [31:0] m_axi_bus_B_ARADDR;
output  [0:0] m_axi_bus_B_ARID;
output  [31:0] m_axi_bus_B_ARLEN;
output  [2:0] m_axi_bus_B_ARSIZE;
output  [1:0] m_axi_bus_B_ARBURST;
output  [1:0] m_axi_bus_B_ARLOCK;
output  [3:0] m_axi_bus_B_ARCACHE;
output  [2:0] m_axi_bus_B_ARPROT;
output  [3:0] m_axi_bus_B_ARQOS;
output  [3:0] m_axi_bus_B_ARREGION;
output  [0:0] m_axi_bus_B_ARUSER;
input   m_axi_bus_B_RVALID;
output   m_axi_bus_B_RREADY;
input  [31:0] m_axi_bus_B_RDATA;
input   m_axi_bus_B_RLAST;
input  [0:0] m_axi_bus_B_RID;
input  [0:0] m_axi_bus_B_RUSER;
input  [1:0] m_axi_bus_B_RRESP;
input   m_axi_bus_B_BVALID;
output   m_axi_bus_B_BREADY;
input  [1:0] m_axi_bus_B_BRESP;
input  [0:0] m_axi_bus_B_BID;
input  [0:0] m_axi_bus_B_BUSER;
input  [31:0] bitcast_ln18;
input  [29:0] sext_ln12_1;
input  [29:0] sext_ln12;
output  [31:0] tmp2_0_out;
output   tmp2_0_out_ap_vld;

reg ap_idle;
reg m_axi_bus_A_RREADY;
reg m_axi_bus_B_RREADY;
reg tmp2_0_out_ap_vld;

(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
reg   [0:0] icmp_ln12_reg_285;
reg    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state37_pp0_stage4_iter1;
reg    ap_block_pp0_stage4_subdone;
reg    ap_condition_exit_pp0_iter0_stage4;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage31;
wire    ap_block_state32_pp0_stage31_iter0;
wire    ap_block_pp0_stage31_subdone;
reg    bus_B_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
reg    bus_A_blk_n_R;
wire   [31:0] grp_fu_102_p2;
reg   [31:0] reg_107;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_state9_pp0_stage8_iter0;
reg    ap_block_pp0_stage8_11001;
wire   [31:0] grp_fu_97_p2;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_11001;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_state21_pp0_stage20_iter0;
wire    ap_block_pp0_stage20_11001;
wire    ap_CS_fsm_pp0_stage24;
wire    ap_block_state25_pp0_stage24_iter0;
wire    ap_block_pp0_stage24_11001;
wire    ap_CS_fsm_pp0_stage28;
wire    ap_block_state29_pp0_stage28_iter0;
wire    ap_block_pp0_stage28_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state33_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln12_fu_138_p2;
reg    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state34_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [31:0] bitcast_ln16_fu_167_p1;
wire   [31:0] bitcast_ln16_1_fu_172_p1;
wire   [31:0] bitcast_ln16_8_fu_177_p1;
reg    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state35_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
wire   [31:0] bitcast_ln16_9_fu_182_p1;
wire   [31:0] bitcast_ln16_2_fu_187_p1;
reg    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state36_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
wire   [31:0] bitcast_ln16_10_fu_192_p1;
wire   [31:0] bitcast_ln16_3_fu_201_p1;
wire   [31:0] bitcast_ln16_11_fu_206_p1;
reg   [31:0] tmp_1_reg_344;
reg    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
wire   [31:0] bitcast_ln16_4_fu_211_p1;
wire   [31:0] bitcast_ln16_12_fu_216_p1;
reg   [31:0] tmp_2_reg_359;
reg    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
wire   [31:0] bitcast_ln16_5_fu_221_p1;
wire   [31:0] bitcast_ln16_13_fu_226_p1;
reg   [31:0] tmp_3_reg_374;
reg    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_11001;
wire   [31:0] bitcast_ln16_6_fu_231_p1;
wire   [31:0] bitcast_ln16_14_fu_236_p1;
wire   [31:0] bitcast_ln16_7_fu_241_p1;
wire   [31:0] bitcast_ln16_15_fu_246_p1;
reg   [31:0] tmp_5_reg_399;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
reg   [31:0] tmp_6_reg_404;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
reg   [31:0] tmp_7_reg_409;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [8:0] i_V_0_fu_54;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_i_V_0_load;
wire    ap_block_pp0_stage0;
wire   [8:0] add_ln870_fu_144_p2;
reg   [31:0] tmp2_0_fu_58;
reg   [31:0] ap_sig_allocacmp_tmp2_0_load;
reg    ap_block_pp0_stage4_01001;
reg   [31:0] grp_fu_97_p0;
reg   [31:0] grp_fu_97_p1;
wire    ap_block_pp0_stage12;
wire    ap_block_pp0_stage16;
wire    ap_block_pp0_stage20;
wire    ap_block_pp0_stage24;
wire    ap_block_pp0_stage28;
reg   [31:0] grp_fu_102_p0;
reg   [31:0] grp_fu_102_p1;
reg    grp_fu_97_ce;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_11001;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_11001;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_state19_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_11001;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state20_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_11001;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_state22_pp0_stage21_iter0;
wire    ap_block_pp0_stage21_11001;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_state23_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_11001;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_state24_pp0_stage23_iter0;
wire    ap_block_pp0_stage23_11001;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_state26_pp0_stage25_iter0;
wire    ap_block_pp0_stage25_11001;
wire    ap_CS_fsm_pp0_stage25;
wire    ap_block_state27_pp0_stage26_iter0;
wire    ap_block_pp0_stage26_11001;
wire    ap_CS_fsm_pp0_stage26;
wire    ap_block_state28_pp0_stage27_iter0;
wire    ap_block_pp0_stage27_11001;
wire    ap_CS_fsm_pp0_stage27;
wire    ap_block_state30_pp0_stage29_iter0;
wire    ap_block_pp0_stage29_11001;
wire    ap_CS_fsm_pp0_stage29;
wire    ap_block_state31_pp0_stage30_iter0;
wire    ap_block_pp0_stage30_11001;
wire    ap_CS_fsm_pp0_stage30;
wire    ap_block_pp0_stage31_11001;
reg    grp_fu_102_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [31:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_pp0_stage24_subdone;
wire    ap_block_pp0_stage25_subdone;
wire    ap_block_pp0_stage26_subdone;
wire    ap_block_pp0_stage27_subdone;
wire    ap_block_pp0_stage28_subdone;
wire    ap_block_pp0_stage29_subdone;
wire    ap_block_pp0_stage30_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_scalaire_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_97_p0),
    .din1(grp_fu_97_p1),
    .ce(grp_fu_97_ce),
    .dout(grp_fu_97_p2)
);

test_scalaire_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_102_p0),
    .din1(grp_fu_102_p1),
    .ce(grp_fu_102_ce),
    .dout(grp_fu_102_p2)
);

test_scalaire_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage4),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage4)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage31) & (1'b0 == ap_block_pp0_stage31_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln12_fu_138_p2 == 1'd0))) begin
            i_V_0_fu_54 <= add_ln870_fu_144_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_V_0_fu_54 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp2_0_fu_58 <= bitcast_ln18;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp2_0_fu_58 <= grp_fu_97_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln12_reg_285 <= icmp_ln12_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln12_reg_285 == 1'd0)))) begin
        reg_107 <= grp_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln12_reg_285 == 1'd0))) begin
        tmp_1_reg_344 <= grp_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln12_reg_285 == 1'd0))) begin
        tmp_2_reg_359 <= grp_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln12_reg_285 == 1'd0))) begin
        tmp_3_reg_374 <= grp_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln12_reg_285 == 1'd0))) begin
        tmp_5_reg_399 <= grp_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln12_reg_285 == 1'd0))) begin
        tmp_6_reg_404 <= grp_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln12_reg_285 == 1'd0))) begin
        tmp_7_reg_409 <= grp_fu_102_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone) & (icmp_ln12_reg_285 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage31) & (1'b0 == ap_block_pp0_stage31_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_V_0_load = 9'd0;
    end else begin
        ap_sig_allocacmp_i_V_0_load = i_V_0_fu_54;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        ap_sig_allocacmp_tmp2_0_load = grp_fu_97_p2;
    end else begin
        ap_sig_allocacmp_tmp2_0_load = tmp2_0_fu_58;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln12_reg_285 == 1'd0)))) begin
        bus_A_blk_n_R = m_axi_bus_A_RVALID;
    end else begin
        bus_A_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln12_reg_285 == 1'd0)))) begin
        bus_B_blk_n_R = m_axi_bus_B_RVALID;
    end else begin
        bus_B_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_102_ce = 1'b1;
    end else begin
        grp_fu_102_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
            grp_fu_102_p0 = bitcast_ln16_7_fu_241_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
            grp_fu_102_p0 = bitcast_ln16_6_fu_231_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            grp_fu_102_p0 = bitcast_ln16_5_fu_221_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            grp_fu_102_p0 = bitcast_ln16_4_fu_211_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            grp_fu_102_p0 = bitcast_ln16_3_fu_201_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            grp_fu_102_p0 = bitcast_ln16_2_fu_187_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_102_p0 = bitcast_ln16_8_fu_177_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_102_p0 = bitcast_ln16_fu_167_p1;
        end else begin
            grp_fu_102_p0 = 'bx;
        end
    end else begin
        grp_fu_102_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
            grp_fu_102_p1 = bitcast_ln16_15_fu_246_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
            grp_fu_102_p1 = bitcast_ln16_14_fu_236_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            grp_fu_102_p1 = bitcast_ln16_13_fu_226_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            grp_fu_102_p1 = bitcast_ln16_12_fu_216_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            grp_fu_102_p1 = bitcast_ln16_11_fu_206_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            grp_fu_102_p1 = bitcast_ln16_10_fu_192_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_102_p1 = bitcast_ln16_9_fu_182_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_102_p1 = bitcast_ln16_1_fu_172_p1;
        end else begin
            grp_fu_102_p1 = 'bx;
        end
    end else begin
        grp_fu_102_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage30) & (1'b0 == ap_block_pp0_stage30_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage29) & (1'b0 == ap_block_pp0_stage29_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage27) & (1'b0 == ap_block_pp0_stage27_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage26) & (1'b0 == ap_block_pp0_stage26_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage25) & (1'b0 == ap_block_pp0_stage25_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage31) & (1'b0 == ap_block_pp0_stage31_11001)))) begin
        grp_fu_97_ce = 1'b1;
    end else begin
        grp_fu_97_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8)))) begin
        grp_fu_97_p0 = grp_fu_97_p2;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_97_p0 = ap_sig_allocacmp_tmp2_0_load;
    end else begin
        grp_fu_97_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_97_p1 = tmp_7_reg_409;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28))) begin
        grp_fu_97_p1 = tmp_6_reg_404;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24))) begin
        grp_fu_97_p1 = tmp_5_reg_399;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20))) begin
        grp_fu_97_p1 = reg_107;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16))) begin
        grp_fu_97_p1 = tmp_3_reg_374;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12))) begin
        grp_fu_97_p1 = tmp_2_reg_359;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        grp_fu_97_p1 = tmp_1_reg_344;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_97_p1 = grp_fu_102_p2;
    end else begin
        grp_fu_97_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln12_reg_285 == 1'd0)))) begin
        m_axi_bus_A_RREADY = 1'b1;
    end else begin
        m_axi_bus_A_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln12_reg_285 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln12_reg_285 == 1'd0)))) begin
        m_axi_bus_B_RREADY = 1'b1;
    end else begin
        m_axi_bus_B_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln12_reg_285 == 1'd1))) begin
        tmp2_0_out_ap_vld = 1'b1;
    end else begin
        tmp2_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_idle_pp0_1to1 == 1'b1) & (ap_start_int == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage4)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((1'b0 == ap_block_pp0_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((1'b0 == ap_block_pp0_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((1'b0 == ap_block_pp0_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((1'b0 == ap_block_pp0_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((1'b0 == ap_block_pp0_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((1'b0 == ap_block_pp0_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((1'b0 == ap_block_pp0_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln870_fu_144_p2 = (ap_sig_allocacmp_i_V_0_load + 9'd8);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage24 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage25 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage26 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp0_stage27 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage28 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage29 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage30 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp0_stage31 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage28_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0)));
end

assign ap_block_state30_pp0_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage30_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage31_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage4_iter0 = (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state6_pp0_stage5_iter0 = (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state7_pp0_stage6_iter0 = (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state8_pp0_stage7_iter0 = (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state9_pp0_stage8_iter0 = (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln12_reg_285 == 1'd0)) | ((icmp_ln12_reg_285 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage4;

assign bitcast_ln16_10_fu_192_p1 = m_axi_bus_B_RDATA;

assign bitcast_ln16_11_fu_206_p1 = m_axi_bus_B_RDATA;

assign bitcast_ln16_12_fu_216_p1 = m_axi_bus_B_RDATA;

assign bitcast_ln16_13_fu_226_p1 = m_axi_bus_B_RDATA;

assign bitcast_ln16_14_fu_236_p1 = m_axi_bus_B_RDATA;

assign bitcast_ln16_15_fu_246_p1 = m_axi_bus_B_RDATA;

assign bitcast_ln16_1_fu_172_p1 = m_axi_bus_B_RDATA;

assign bitcast_ln16_2_fu_187_p1 = m_axi_bus_A_RDATA;

assign bitcast_ln16_3_fu_201_p1 = m_axi_bus_A_RDATA;

assign bitcast_ln16_4_fu_211_p1 = m_axi_bus_A_RDATA;

assign bitcast_ln16_5_fu_221_p1 = m_axi_bus_A_RDATA;

assign bitcast_ln16_6_fu_231_p1 = m_axi_bus_A_RDATA;

assign bitcast_ln16_7_fu_241_p1 = m_axi_bus_A_RDATA;

assign bitcast_ln16_8_fu_177_p1 = m_axi_bus_A_RDATA;

assign bitcast_ln16_9_fu_182_p1 = m_axi_bus_B_RDATA;

assign bitcast_ln16_fu_167_p1 = m_axi_bus_A_RDATA;

assign icmp_ln12_fu_138_p2 = ((ap_sig_allocacmp_i_V_0_load == 9'd256) ? 1'b1 : 1'b0);

assign m_axi_bus_A_ARADDR = 32'd0;

assign m_axi_bus_A_ARBURST = 2'd0;

assign m_axi_bus_A_ARCACHE = 4'd0;

assign m_axi_bus_A_ARID = 1'd0;

assign m_axi_bus_A_ARLEN = 32'd0;

assign m_axi_bus_A_ARLOCK = 2'd0;

assign m_axi_bus_A_ARPROT = 3'd0;

assign m_axi_bus_A_ARQOS = 4'd0;

assign m_axi_bus_A_ARREGION = 4'd0;

assign m_axi_bus_A_ARSIZE = 3'd0;

assign m_axi_bus_A_ARUSER = 1'd0;

assign m_axi_bus_A_ARVALID = 1'b0;

assign m_axi_bus_A_AWADDR = 32'd0;

assign m_axi_bus_A_AWBURST = 2'd0;

assign m_axi_bus_A_AWCACHE = 4'd0;

assign m_axi_bus_A_AWID = 1'd0;

assign m_axi_bus_A_AWLEN = 32'd0;

assign m_axi_bus_A_AWLOCK = 2'd0;

assign m_axi_bus_A_AWPROT = 3'd0;

assign m_axi_bus_A_AWQOS = 4'd0;

assign m_axi_bus_A_AWREGION = 4'd0;

assign m_axi_bus_A_AWSIZE = 3'd0;

assign m_axi_bus_A_AWUSER = 1'd0;

assign m_axi_bus_A_AWVALID = 1'b0;

assign m_axi_bus_A_BREADY = 1'b0;

assign m_axi_bus_A_WDATA = 32'd0;

assign m_axi_bus_A_WID = 1'd0;

assign m_axi_bus_A_WLAST = 1'b0;

assign m_axi_bus_A_WSTRB = 4'd0;

assign m_axi_bus_A_WUSER = 1'd0;

assign m_axi_bus_A_WVALID = 1'b0;

assign m_axi_bus_B_ARADDR = 32'd0;

assign m_axi_bus_B_ARBURST = 2'd0;

assign m_axi_bus_B_ARCACHE = 4'd0;

assign m_axi_bus_B_ARID = 1'd0;

assign m_axi_bus_B_ARLEN = 32'd0;

assign m_axi_bus_B_ARLOCK = 2'd0;

assign m_axi_bus_B_ARPROT = 3'd0;

assign m_axi_bus_B_ARQOS = 4'd0;

assign m_axi_bus_B_ARREGION = 4'd0;

assign m_axi_bus_B_ARSIZE = 3'd0;

assign m_axi_bus_B_ARUSER = 1'd0;

assign m_axi_bus_B_ARVALID = 1'b0;

assign m_axi_bus_B_AWADDR = 32'd0;

assign m_axi_bus_B_AWBURST = 2'd0;

assign m_axi_bus_B_AWCACHE = 4'd0;

assign m_axi_bus_B_AWID = 1'd0;

assign m_axi_bus_B_AWLEN = 32'd0;

assign m_axi_bus_B_AWLOCK = 2'd0;

assign m_axi_bus_B_AWPROT = 3'd0;

assign m_axi_bus_B_AWQOS = 4'd0;

assign m_axi_bus_B_AWREGION = 4'd0;

assign m_axi_bus_B_AWSIZE = 3'd0;

assign m_axi_bus_B_AWUSER = 1'd0;

assign m_axi_bus_B_AWVALID = 1'b0;

assign m_axi_bus_B_BREADY = 1'b0;

assign m_axi_bus_B_WDATA = 32'd0;

assign m_axi_bus_B_WID = 1'd0;

assign m_axi_bus_B_WLAST = 1'b0;

assign m_axi_bus_B_WSTRB = 4'd0;

assign m_axi_bus_B_WUSER = 1'd0;

assign m_axi_bus_B_WVALID = 1'b0;

assign tmp2_0_out = tmp2_0_fu_58;

endmodule //test_scalaire_test_scalaire_Pipeline_VITIS_LOOP_12_1
