// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module test_scalaire_test_scalaire_Pipeline_VITIS_LOOP_15_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_bus_B_AWVALID,
        m_axi_bus_B_AWREADY,
        m_axi_bus_B_AWADDR,
        m_axi_bus_B_AWID,
        m_axi_bus_B_AWLEN,
        m_axi_bus_B_AWSIZE,
        m_axi_bus_B_AWBURST,
        m_axi_bus_B_AWLOCK,
        m_axi_bus_B_AWCACHE,
        m_axi_bus_B_AWPROT,
        m_axi_bus_B_AWQOS,
        m_axi_bus_B_AWREGION,
        m_axi_bus_B_AWUSER,
        m_axi_bus_B_WVALID,
        m_axi_bus_B_WREADY,
        m_axi_bus_B_WDATA,
        m_axi_bus_B_WSTRB,
        m_axi_bus_B_WLAST,
        m_axi_bus_B_WID,
        m_axi_bus_B_WUSER,
        m_axi_bus_B_ARVALID,
        m_axi_bus_B_ARREADY,
        m_axi_bus_B_ARADDR,
        m_axi_bus_B_ARID,
        m_axi_bus_B_ARLEN,
        m_axi_bus_B_ARSIZE,
        m_axi_bus_B_ARBURST,
        m_axi_bus_B_ARLOCK,
        m_axi_bus_B_ARCACHE,
        m_axi_bus_B_ARPROT,
        m_axi_bus_B_ARQOS,
        m_axi_bus_B_ARREGION,
        m_axi_bus_B_ARUSER,
        m_axi_bus_B_RVALID,
        m_axi_bus_B_RREADY,
        m_axi_bus_B_RDATA,
        m_axi_bus_B_RLAST,
        m_axi_bus_B_RID,
        m_axi_bus_B_RUSER,
        m_axi_bus_B_RRESP,
        m_axi_bus_B_BVALID,
        m_axi_bus_B_BREADY,
        m_axi_bus_B_BRESP,
        m_axi_bus_B_BID,
        m_axi_bus_B_BUSER,
        sext_ln15_1,
        m_axi_bus_A_AWVALID,
        m_axi_bus_A_AWREADY,
        m_axi_bus_A_AWADDR,
        m_axi_bus_A_AWID,
        m_axi_bus_A_AWLEN,
        m_axi_bus_A_AWSIZE,
        m_axi_bus_A_AWBURST,
        m_axi_bus_A_AWLOCK,
        m_axi_bus_A_AWCACHE,
        m_axi_bus_A_AWPROT,
        m_axi_bus_A_AWQOS,
        m_axi_bus_A_AWREGION,
        m_axi_bus_A_AWUSER,
        m_axi_bus_A_WVALID,
        m_axi_bus_A_WREADY,
        m_axi_bus_A_WDATA,
        m_axi_bus_A_WSTRB,
        m_axi_bus_A_WLAST,
        m_axi_bus_A_WID,
        m_axi_bus_A_WUSER,
        m_axi_bus_A_ARVALID,
        m_axi_bus_A_ARREADY,
        m_axi_bus_A_ARADDR,
        m_axi_bus_A_ARID,
        m_axi_bus_A_ARLEN,
        m_axi_bus_A_ARSIZE,
        m_axi_bus_A_ARBURST,
        m_axi_bus_A_ARLOCK,
        m_axi_bus_A_ARCACHE,
        m_axi_bus_A_ARPROT,
        m_axi_bus_A_ARQOS,
        m_axi_bus_A_ARREGION,
        m_axi_bus_A_ARUSER,
        m_axi_bus_A_RVALID,
        m_axi_bus_A_RREADY,
        m_axi_bus_A_RDATA,
        m_axi_bus_A_RLAST,
        m_axi_bus_A_RID,
        m_axi_bus_A_RUSER,
        m_axi_bus_A_RRESP,
        m_axi_bus_A_BVALID,
        m_axi_bus_A_BREADY,
        m_axi_bus_A_BRESP,
        m_axi_bus_A_BID,
        m_axi_bus_A_BUSER,
        sext_ln15,
        tmp2_0_out,
        tmp2_0_out_ap_vld,
        tmp2_1_2_out,
        tmp2_1_2_out_ap_vld,
        tmp2_1_1_out,
        tmp2_1_1_out_ap_vld,
        tmp2_1_out,
        tmp2_1_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_pp0_stage0 = 22'd2;
parameter    ap_ST_fsm_pp0_stage1 = 22'd4;
parameter    ap_ST_fsm_pp0_stage2 = 22'd8;
parameter    ap_ST_fsm_pp0_stage3 = 22'd16;
parameter    ap_ST_fsm_pp0_stage4 = 22'd32;
parameter    ap_ST_fsm_pp0_stage5 = 22'd64;
parameter    ap_ST_fsm_pp0_stage6 = 22'd128;
parameter    ap_ST_fsm_pp0_stage7 = 22'd256;
parameter    ap_ST_fsm_pp0_stage8 = 22'd512;
parameter    ap_ST_fsm_pp0_stage9 = 22'd1024;
parameter    ap_ST_fsm_pp0_stage10 = 22'd2048;
parameter    ap_ST_fsm_pp0_stage11 = 22'd4096;
parameter    ap_ST_fsm_pp0_stage12 = 22'd8192;
parameter    ap_ST_fsm_pp0_stage13 = 22'd16384;
parameter    ap_ST_fsm_pp0_stage14 = 22'd32768;
parameter    ap_ST_fsm_pp0_stage15 = 22'd65536;
parameter    ap_ST_fsm_state23 = 22'd131072;
parameter    ap_ST_fsm_state24 = 22'd262144;
parameter    ap_ST_fsm_state25 = 22'd524288;
parameter    ap_ST_fsm_state26 = 22'd1048576;
parameter    ap_ST_fsm_state27 = 22'd2097152;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_bus_B_AWVALID;
input   m_axi_bus_B_AWREADY;
output  [31:0] m_axi_bus_B_AWADDR;
output  [0:0] m_axi_bus_B_AWID;
output  [31:0] m_axi_bus_B_AWLEN;
output  [2:0] m_axi_bus_B_AWSIZE;
output  [1:0] m_axi_bus_B_AWBURST;
output  [1:0] m_axi_bus_B_AWLOCK;
output  [3:0] m_axi_bus_B_AWCACHE;
output  [2:0] m_axi_bus_B_AWPROT;
output  [3:0] m_axi_bus_B_AWQOS;
output  [3:0] m_axi_bus_B_AWREGION;
output  [0:0] m_axi_bus_B_AWUSER;
output   m_axi_bus_B_WVALID;
input   m_axi_bus_B_WREADY;
output  [31:0] m_axi_bus_B_WDATA;
output  [3:0] m_axi_bus_B_WSTRB;
output   m_axi_bus_B_WLAST;
output  [0:0] m_axi_bus_B_WID;
output  [0:0] m_axi_bus_B_WUSER;
output   m_axi_bus_B_ARVALID;
input   m_axi_bus_B_ARREADY;
output  [31:0] m_axi_bus_B_ARADDR;
output  [0:0] m_axi_bus_B_ARID;
output  [31:0] m_axi_bus_B_ARLEN;
output  [2:0] m_axi_bus_B_ARSIZE;
output  [1:0] m_axi_bus_B_ARBURST;
output  [1:0] m_axi_bus_B_ARLOCK;
output  [3:0] m_axi_bus_B_ARCACHE;
output  [2:0] m_axi_bus_B_ARPROT;
output  [3:0] m_axi_bus_B_ARQOS;
output  [3:0] m_axi_bus_B_ARREGION;
output  [0:0] m_axi_bus_B_ARUSER;
input   m_axi_bus_B_RVALID;
output   m_axi_bus_B_RREADY;
input  [31:0] m_axi_bus_B_RDATA;
input   m_axi_bus_B_RLAST;
input  [0:0] m_axi_bus_B_RID;
input  [0:0] m_axi_bus_B_RUSER;
input  [1:0] m_axi_bus_B_RRESP;
input   m_axi_bus_B_BVALID;
output   m_axi_bus_B_BREADY;
input  [1:0] m_axi_bus_B_BRESP;
input  [0:0] m_axi_bus_B_BID;
input  [0:0] m_axi_bus_B_BUSER;
input  [29:0] sext_ln15_1;
output   m_axi_bus_A_AWVALID;
input   m_axi_bus_A_AWREADY;
output  [31:0] m_axi_bus_A_AWADDR;
output  [0:0] m_axi_bus_A_AWID;
output  [31:0] m_axi_bus_A_AWLEN;
output  [2:0] m_axi_bus_A_AWSIZE;
output  [1:0] m_axi_bus_A_AWBURST;
output  [1:0] m_axi_bus_A_AWLOCK;
output  [3:0] m_axi_bus_A_AWCACHE;
output  [2:0] m_axi_bus_A_AWPROT;
output  [3:0] m_axi_bus_A_AWQOS;
output  [3:0] m_axi_bus_A_AWREGION;
output  [0:0] m_axi_bus_A_AWUSER;
output   m_axi_bus_A_WVALID;
input   m_axi_bus_A_WREADY;
output  [31:0] m_axi_bus_A_WDATA;
output  [3:0] m_axi_bus_A_WSTRB;
output   m_axi_bus_A_WLAST;
output  [0:0] m_axi_bus_A_WID;
output  [0:0] m_axi_bus_A_WUSER;
output   m_axi_bus_A_ARVALID;
input   m_axi_bus_A_ARREADY;
output  [31:0] m_axi_bus_A_ARADDR;
output  [0:0] m_axi_bus_A_ARID;
output  [31:0] m_axi_bus_A_ARLEN;
output  [2:0] m_axi_bus_A_ARSIZE;
output  [1:0] m_axi_bus_A_ARBURST;
output  [1:0] m_axi_bus_A_ARLOCK;
output  [3:0] m_axi_bus_A_ARCACHE;
output  [2:0] m_axi_bus_A_ARPROT;
output  [3:0] m_axi_bus_A_ARQOS;
output  [3:0] m_axi_bus_A_ARREGION;
output  [0:0] m_axi_bus_A_ARUSER;
input   m_axi_bus_A_RVALID;
output   m_axi_bus_A_RREADY;
input  [31:0] m_axi_bus_A_RDATA;
input   m_axi_bus_A_RLAST;
input  [0:0] m_axi_bus_A_RID;
input  [0:0] m_axi_bus_A_RUSER;
input  [1:0] m_axi_bus_A_RRESP;
input   m_axi_bus_A_BVALID;
output   m_axi_bus_A_BREADY;
input  [1:0] m_axi_bus_A_BRESP;
input  [0:0] m_axi_bus_A_BID;
input  [0:0] m_axi_bus_A_BUSER;
input  [29:0] sext_ln15;
output  [31:0] tmp2_0_out;
output   tmp2_0_out_ap_vld;
output  [31:0] tmp2_1_2_out;
output   tmp2_1_2_out_ap_vld;
output  [31:0] tmp2_1_1_out;
output   tmp2_1_1_out_ap_vld;
output  [31:0] tmp2_1_out;
output   tmp2_1_out_ap_vld;
output  [1:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_bus_B_RREADY;
reg m_axi_bus_A_RREADY;
reg[31:0] tmp2_0_out;
reg tmp2_0_out_ap_vld;
reg tmp2_1_2_out_ap_vld;
reg tmp2_1_1_out_ap_vld;
reg tmp2_1_out_ap_vld;
reg[1:0] ap_return;

(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    bus_B_blk_n_R;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage4;
reg   [0:0] icmp_ln1057_reg_323;
reg   [0:0] icmp_ln1057_1_reg_327;
reg   [0:0] icmp_ln1057_2_reg_331;
reg   [0:0] icmp_ln1057_3_reg_335;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    bus_A_blk_n_R;
wire   [0:0] icmp_ln1057_fu_189_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state18_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1057_reg_323_pp0_iter1_reg;
wire   [0:0] icmp_ln1057_1_fu_201_p2;
reg   [0:0] icmp_ln1057_1_reg_327_pp0_iter1_reg;
wire   [0:0] icmp_ln1057_2_fu_213_p2;
reg   [0:0] icmp_ln1057_2_reg_331_pp0_iter1_reg;
wire   [0:0] icmp_ln1057_3_fu_225_p2;
reg   [0:0] icmp_ln1057_3_reg_335_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state19_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [31:0] bitcast_ln19_fu_254_p1;
wire   [31:0] bitcast_ln20_fu_259_p1;
wire   [31:0] bitcast_ln19_1_fu_264_p1;
reg    ap_predicate_op62_read_state4;
reg    ap_predicate_op64_read_state4;
reg    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state20_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
wire   [31:0] bitcast_ln20_1_fu_269_p1;
wire   [31:0] bitcast_ln19_2_fu_274_p1;
reg    ap_predicate_op69_read_state5;
reg    ap_predicate_op71_read_state5;
reg    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state21_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
wire   [31:0] bitcast_ln20_2_fu_279_p1;
reg   [31:0] grp_load_fu_163_p1;
reg   [31:0] tmp2_0_load_reg_379;
reg    ap_predicate_op79_read_state6;
reg    ap_predicate_op81_read_state6;
reg    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state22_pp0_stage4_iter1;
reg    ap_block_pp0_stage4_11001;
wire   [31:0] grp_fu_158_p2;
wire   [31:0] bitcast_ln19_3_fu_284_p1;
wire   [31:0] bitcast_ln20_3_fu_289_p1;
reg   [31:0] tmp_1_reg_400;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] tmp_2_reg_405;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
reg   [31:0] tmp_3_reg_410;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [31:0] grp_fu_153_p2;
reg   [31:0] tmp2_1_reg_415;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
reg   [31:0] tmp2_1_1_reg_421;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state14_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
reg   [31:0] tmp2_1_2_reg_427;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state17_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_subdone;
reg    ap_predicate_tran18to23_state17;
reg    ap_predicate_tran18to24_state17;
reg    ap_predicate_tran18to25_state17;
reg    ap_condition_pp0_flush_enable;
wire    ap_block_pp0_stage0_subdone;
reg   [1:0] UnifiedRetVal_reg_132;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
reg   [8:0] i_V_0_fu_74;
wire   [8:0] add_ln870_fu_231_p2;
wire    ap_block_pp0_stage0;
reg   [31:0] tmp2_0_fu_78;
reg   [31:0] ap_sig_allocacmp_tmp2_0_load;
reg   [31:0] grp_fu_153_p0;
reg   [31:0] grp_fu_153_p1;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage12;
reg   [31:0] grp_fu_158_p0;
reg   [31:0] grp_fu_158_p1;
wire   [8:0] or_ln870_fu_195_p2;
wire   [8:0] or_ln870_1_fu_207_p2;
wire   [8:0] or_ln870_2_fu_219_p2;
reg    grp_fu_153_ce;
wire    ap_block_state11_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state12_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state13_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state15_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state16_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage15_11001;
reg    grp_fu_158_ce;
reg   [1:0] ap_return_preg;
wire    ap_CS_fsm_state27;
reg   [21:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
reg   [3:0] ap_exit_tran_regpp0;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 2'd0;
end

test_scalaire_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_153_p0),
    .din1(grp_fu_153_p1),
    .ce(grp_fu_153_ce),
    .dout(grp_fu_153_p2)
);

test_scalaire_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_158_p0),
    .din1(grp_fu_158_p1),
    .ce(grp_fu_158_ce),
    .dout(grp_fu_158_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 2'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_return_preg <= UnifiedRetVal_reg_132;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        UnifiedRetVal_reg_132 <= 2'd3;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        UnifiedRetVal_reg_132 <= 2'd2;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        UnifiedRetVal_reg_132 <= 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        UnifiedRetVal_reg_132 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage15_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if ((icmp_ln1057_reg_323 == 1'd1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
            ap_exit_tran_regpp0[1] <= 1'b1;
        end else if ((ap_predicate_tran18to25_state17 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
            ap_exit_tran_regpp0[1] <= 1'b1;
        end else if ((ap_predicate_tran18to24_state17 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
            ap_exit_tran_regpp0[1] <= 1'b0;
        end else if ((ap_predicate_tran18to23_state17 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
            ap_exit_tran_regpp0[1] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_0_fu_74 <= 9'd0;
    end else if (((icmp_ln1057_3_fu_225_p2 == 1'd0) & (icmp_ln1057_2_fu_213_p2 == 1'd0) & (icmp_ln1057_1_fu_201_p2 == 1'd0) & (icmp_ln1057_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_V_0_fu_74 <= add_ln870_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp2_0_fu_78 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1057_3_reg_335_pp0_iter1_reg == 1'd0) & (icmp_ln1057_2_reg_331_pp0_iter1_reg == 1'd0) & (icmp_ln1057_1_reg_327_pp0_iter1_reg == 1'd0) & (icmp_ln1057_reg_323_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp2_0_fu_78 <= grp_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1057_1_reg_327 <= icmp_ln1057_1_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1057_1_reg_327_pp0_iter1_reg <= icmp_ln1057_1_reg_327;
        icmp_ln1057_2_reg_331_pp0_iter1_reg <= icmp_ln1057_2_reg_331;
        icmp_ln1057_3_reg_335_pp0_iter1_reg <= icmp_ln1057_3_reg_335;
        icmp_ln1057_reg_323 <= icmp_ln1057_fu_189_p2;
        icmp_ln1057_reg_323_pp0_iter1_reg <= icmp_ln1057_reg_323;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_1_fu_201_p2 == 1'd0) & (icmp_ln1057_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1057_2_reg_331 <= icmp_ln1057_2_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_2_fu_213_p2 == 1'd0) & (icmp_ln1057_1_fu_201_p2 == 1'd0) & (icmp_ln1057_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1057_3_reg_335 <= icmp_ln1057_3_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp2_0_load_reg_379 <= grp_load_fu_163_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp2_1_1_reg_421 <= grp_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_2_reg_331 == 1'd0) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp2_1_2_reg_427 <= grp_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp2_1_reg_415 <= grp_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_1_reg_400 <= grp_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln1057_2_reg_331 == 1'd0) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_2_reg_405 <= grp_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln1057_3_reg_335 == 1'd0) & (icmp_ln1057_2_reg_331 == 1'd0) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_3_reg_410 <= grp_fu_158_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_subdone) & ((ap_predicate_tran18to25_state17 == 1'b1) | (ap_predicate_tran18to24_state17 == 1'b1) | (ap_predicate_tran18to23_state17 == 1'b1) | (icmp_ln1057_reg_323 == 1'd1)))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_return = UnifiedRetVal_reg_132;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1057_3_reg_335_pp0_iter1_reg == 1'd0) & (icmp_ln1057_2_reg_331_pp0_iter1_reg == 1'd0) & (icmp_ln1057_1_reg_327_pp0_iter1_reg == 1'd0) & (icmp_ln1057_reg_323_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        ap_sig_allocacmp_tmp2_0_load = grp_fu_153_p2;
    end else begin
        ap_sig_allocacmp_tmp2_0_load = tmp2_0_fu_78;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln1057_2_reg_331 == 1'd0) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln1057_3_reg_335 == 1'd0) & (icmp_ln1057_2_reg_331 == 1'd0) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        bus_A_blk_n_R = m_axi_bus_A_RVALID;
    end else begin
        bus_A_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln1057_2_reg_331 == 1'd0) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln1057_3_reg_335 == 1'd0) & (icmp_ln1057_2_reg_331 == 1'd0) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        bus_B_blk_n_R = m_axi_bus_B_RVALID;
    end else begin
        bus_B_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        grp_fu_153_ce = 1'b1;
    end else begin
        grp_fu_153_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_153_p0 = grp_fu_153_p2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_153_p0 = grp_load_fu_163_p1;
    end else begin
        grp_fu_153_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_153_p1 = tmp_3_reg_410;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_153_p1 = tmp_2_reg_405;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_153_p1 = tmp_1_reg_400;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_153_p1 = grp_fu_158_p2;
    end else begin
        grp_fu_153_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        grp_fu_158_ce = 1'b1;
    end else begin
        grp_fu_158_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            grp_fu_158_p0 = bitcast_ln19_3_fu_284_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            grp_fu_158_p0 = bitcast_ln19_2_fu_274_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_158_p0 = bitcast_ln19_1_fu_264_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_158_p0 = bitcast_ln19_fu_254_p1;
        end else begin
            grp_fu_158_p0 = 'bx;
        end
    end else begin
        grp_fu_158_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            grp_fu_158_p1 = bitcast_ln20_3_fu_289_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            grp_fu_158_p1 = bitcast_ln20_2_fu_279_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_158_p1 = bitcast_ln20_1_fu_269_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_158_p1 = bitcast_ln20_fu_259_p1;
        end else begin
            grp_fu_158_p1 = 'bx;
        end
    end else begin
        grp_fu_158_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26))) begin
        grp_load_fu_163_p1 = tmp2_0_fu_78;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_load_fu_163_p1 = ap_sig_allocacmp_tmp2_0_load;
    end else begin
        grp_load_fu_163_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op79_read_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_predicate_op69_read_state5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_predicate_op62_read_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        m_axi_bus_A_RREADY = 1'b1;
    end else begin
        m_axi_bus_A_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op81_read_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_predicate_op71_read_state5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_predicate_op64_read_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1057_reg_323 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        m_axi_bus_B_RREADY = 1'b1;
    end else begin
        m_axi_bus_B_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp2_0_out = tmp2_0_load_reg_379;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26))) begin
        tmp2_0_out = grp_load_fu_163_p1;
    end else begin
        tmp2_0_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26))) begin
        tmp2_0_out_ap_vld = 1'b1;
    end else begin
        tmp2_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        tmp2_1_1_out_ap_vld = 1'b1;
    end else begin
        tmp2_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp2_1_2_out_ap_vld = 1'b1;
    end else begin
        tmp2_1_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        tmp2_1_out_ap_vld = 1'b1;
    end else begin
        tmp2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_exit_tran_regpp0 == 4'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else if (((ap_exit_tran_regpp0 == 4'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if (((ap_exit_tran_regpp0 == 4'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((ap_exit_tran_regpp0 == 4'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln870_fu_231_p2 = (i_V_0_fu_74 + 9'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd21];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln1057_reg_323 == 1'd0)) | ((icmp_ln1057_reg_323 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln1057_reg_323 == 1'd0)) | ((icmp_ln1057_reg_323 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op62_read_state4 == 1'b1) & (m_axi_bus_A_RVALID == 1'b0)) | ((m_axi_bus_B_RVALID == 1'b0) & (ap_predicate_op64_read_state4 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op62_read_state4 == 1'b1) & (m_axi_bus_A_RVALID == 1'b0)) | ((m_axi_bus_B_RVALID == 1'b0) & (ap_predicate_op64_read_state4 == 1'b1))));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op69_read_state5 == 1'b1) & (m_axi_bus_A_RVALID == 1'b0)) | ((m_axi_bus_B_RVALID == 1'b0) & (ap_predicate_op71_read_state5 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op69_read_state5 == 1'b1) & (m_axi_bus_A_RVALID == 1'b0)) | ((m_axi_bus_B_RVALID == 1'b0) & (ap_predicate_op71_read_state5 == 1'b1))));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op79_read_state6 == 1'b1) & (m_axi_bus_A_RVALID == 1'b0)) | ((m_axi_bus_B_RVALID == 1'b0) & (ap_predicate_op81_read_state6 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op79_read_state6 == 1'b1) & (m_axi_bus_A_RVALID == 1'b0)) | ((m_axi_bus_B_RVALID == 1'b0) & (ap_predicate_op81_read_state6 == 1'b1))));
end

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = (((m_axi_bus_B_RVALID == 1'b0) & (icmp_ln1057_reg_323 == 1'd0)) | ((icmp_ln1057_reg_323 == 1'd0) & (m_axi_bus_A_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = (((ap_predicate_op62_read_state4 == 1'b1) & (m_axi_bus_A_RVALID == 1'b0)) | ((m_axi_bus_B_RVALID == 1'b0) & (ap_predicate_op64_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = (((ap_predicate_op69_read_state5 == 1'b1) & (m_axi_bus_A_RVALID == 1'b0)) | ((m_axi_bus_B_RVALID == 1'b0) & (ap_predicate_op71_read_state5 == 1'b1)));
end

always @ (*) begin
    ap_block_state6_pp0_stage4_iter0 = (((ap_predicate_op79_read_state6 == 1'b1) & (m_axi_bus_A_RVALID == 1'b0)) | ((m_axi_bus_B_RVALID == 1'b0) & (ap_predicate_op81_read_state6 == 1'b1)));
end

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op62_read_state4 = ((icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0));
end

always @ (*) begin
    ap_predicate_op64_read_state4 = ((icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0));
end

always @ (*) begin
    ap_predicate_op69_read_state5 = ((icmp_ln1057_2_reg_331 == 1'd0) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0));
end

always @ (*) begin
    ap_predicate_op71_read_state5 = ((icmp_ln1057_2_reg_331 == 1'd0) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0));
end

always @ (*) begin
    ap_predicate_op79_read_state6 = ((icmp_ln1057_3_reg_335 == 1'd0) & (icmp_ln1057_2_reg_331 == 1'd0) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0));
end

always @ (*) begin
    ap_predicate_op81_read_state6 = ((icmp_ln1057_3_reg_335 == 1'd0) & (icmp_ln1057_2_reg_331 == 1'd0) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0));
end

always @ (*) begin
    ap_predicate_tran18to23_state17 = ((icmp_ln1057_3_reg_335 == 1'd1) & (icmp_ln1057_2_reg_331 == 1'd0) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0));
end

always @ (*) begin
    ap_predicate_tran18to24_state17 = ((icmp_ln1057_2_reg_331 == 1'd1) & (icmp_ln1057_1_reg_327 == 1'd0) & (icmp_ln1057_reg_323 == 1'd0));
end

always @ (*) begin
    ap_predicate_tran18to25_state17 = ((icmp_ln1057_1_reg_327 == 1'd1) & (icmp_ln1057_reg_323 == 1'd0));
end

assign bitcast_ln19_1_fu_264_p1 = m_axi_bus_A_RDATA;

assign bitcast_ln19_2_fu_274_p1 = m_axi_bus_A_RDATA;

assign bitcast_ln19_3_fu_284_p1 = m_axi_bus_A_RDATA;

assign bitcast_ln19_fu_254_p1 = m_axi_bus_A_RDATA;

assign bitcast_ln20_1_fu_269_p1 = m_axi_bus_B_RDATA;

assign bitcast_ln20_2_fu_279_p1 = m_axi_bus_B_RDATA;

assign bitcast_ln20_3_fu_289_p1 = m_axi_bus_B_RDATA;

assign bitcast_ln20_fu_259_p1 = m_axi_bus_B_RDATA;

assign icmp_ln1057_1_fu_201_p2 = ((or_ln870_fu_195_p2 == 9'd255) ? 1'b1 : 1'b0);

assign icmp_ln1057_2_fu_213_p2 = ((or_ln870_1_fu_207_p2 == 9'd255) ? 1'b1 : 1'b0);

assign icmp_ln1057_3_fu_225_p2 = ((or_ln870_2_fu_219_p2 == 9'd255) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_189_p2 = ((i_V_0_fu_74 == 9'd255) ? 1'b1 : 1'b0);

assign m_axi_bus_A_ARADDR = 32'd0;

assign m_axi_bus_A_ARBURST = 2'd0;

assign m_axi_bus_A_ARCACHE = 4'd0;

assign m_axi_bus_A_ARID = 1'd0;

assign m_axi_bus_A_ARLEN = 32'd0;

assign m_axi_bus_A_ARLOCK = 2'd0;

assign m_axi_bus_A_ARPROT = 3'd0;

assign m_axi_bus_A_ARQOS = 4'd0;

assign m_axi_bus_A_ARREGION = 4'd0;

assign m_axi_bus_A_ARSIZE = 3'd0;

assign m_axi_bus_A_ARUSER = 1'd0;

assign m_axi_bus_A_ARVALID = 1'b0;

assign m_axi_bus_A_AWADDR = 32'd0;

assign m_axi_bus_A_AWBURST = 2'd0;

assign m_axi_bus_A_AWCACHE = 4'd0;

assign m_axi_bus_A_AWID = 1'd0;

assign m_axi_bus_A_AWLEN = 32'd0;

assign m_axi_bus_A_AWLOCK = 2'd0;

assign m_axi_bus_A_AWPROT = 3'd0;

assign m_axi_bus_A_AWQOS = 4'd0;

assign m_axi_bus_A_AWREGION = 4'd0;

assign m_axi_bus_A_AWSIZE = 3'd0;

assign m_axi_bus_A_AWUSER = 1'd0;

assign m_axi_bus_A_AWVALID = 1'b0;

assign m_axi_bus_A_BREADY = 1'b0;

assign m_axi_bus_A_WDATA = 32'd0;

assign m_axi_bus_A_WID = 1'd0;

assign m_axi_bus_A_WLAST = 1'b0;

assign m_axi_bus_A_WSTRB = 4'd0;

assign m_axi_bus_A_WUSER = 1'd0;

assign m_axi_bus_A_WVALID = 1'b0;

assign m_axi_bus_B_ARADDR = 32'd0;

assign m_axi_bus_B_ARBURST = 2'd0;

assign m_axi_bus_B_ARCACHE = 4'd0;

assign m_axi_bus_B_ARID = 1'd0;

assign m_axi_bus_B_ARLEN = 32'd0;

assign m_axi_bus_B_ARLOCK = 2'd0;

assign m_axi_bus_B_ARPROT = 3'd0;

assign m_axi_bus_B_ARQOS = 4'd0;

assign m_axi_bus_B_ARREGION = 4'd0;

assign m_axi_bus_B_ARSIZE = 3'd0;

assign m_axi_bus_B_ARUSER = 1'd0;

assign m_axi_bus_B_ARVALID = 1'b0;

assign m_axi_bus_B_AWADDR = 32'd0;

assign m_axi_bus_B_AWBURST = 2'd0;

assign m_axi_bus_B_AWCACHE = 4'd0;

assign m_axi_bus_B_AWID = 1'd0;

assign m_axi_bus_B_AWLEN = 32'd0;

assign m_axi_bus_B_AWLOCK = 2'd0;

assign m_axi_bus_B_AWPROT = 3'd0;

assign m_axi_bus_B_AWQOS = 4'd0;

assign m_axi_bus_B_AWREGION = 4'd0;

assign m_axi_bus_B_AWSIZE = 3'd0;

assign m_axi_bus_B_AWUSER = 1'd0;

assign m_axi_bus_B_AWVALID = 1'b0;

assign m_axi_bus_B_BREADY = 1'b0;

assign m_axi_bus_B_WDATA = 32'd0;

assign m_axi_bus_B_WID = 1'd0;

assign m_axi_bus_B_WLAST = 1'b0;

assign m_axi_bus_B_WSTRB = 4'd0;

assign m_axi_bus_B_WUSER = 1'd0;

assign m_axi_bus_B_WVALID = 1'b0;

assign or_ln870_1_fu_207_p2 = (i_V_0_fu_74 | 9'd2);

assign or_ln870_2_fu_219_p2 = (i_V_0_fu_74 | 9'd3);

assign or_ln870_fu_195_p2 = (i_V_0_fu_74 | 9'd1);

assign tmp2_1_1_out = tmp2_1_1_reg_421;

assign tmp2_1_2_out = tmp2_1_2_reg_427;

assign tmp2_1_out = tmp2_1_reg_415;

always @ (posedge ap_clk) begin
    ap_exit_tran_regpp0[3:2] <= 2'b00;
end

endmodule //test_scalaire_test_scalaire_Pipeline_VITIS_LOOP_15_1
