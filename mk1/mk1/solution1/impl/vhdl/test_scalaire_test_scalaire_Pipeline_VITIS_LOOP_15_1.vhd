-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity test_scalaire_test_scalaire_Pipeline_VITIS_LOOP_15_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_bus_B_AWVALID : OUT STD_LOGIC;
    m_axi_bus_B_AWREADY : IN STD_LOGIC;
    m_axi_bus_B_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_WVALID : OUT STD_LOGIC;
    m_axi_bus_B_WREADY : IN STD_LOGIC;
    m_axi_bus_B_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_WLAST : OUT STD_LOGIC;
    m_axi_bus_B_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_ARVALID : OUT STD_LOGIC;
    m_axi_bus_B_ARREADY : IN STD_LOGIC;
    m_axi_bus_B_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_B_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_RVALID : IN STD_LOGIC;
    m_axi_bus_B_RREADY : OUT STD_LOGIC;
    m_axi_bus_B_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_B_RLAST : IN STD_LOGIC;
    m_axi_bus_B_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_BVALID : IN STD_LOGIC;
    m_axi_bus_B_BREADY : OUT STD_LOGIC;
    m_axi_bus_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_B_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_B_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln15_1 : IN STD_LOGIC_VECTOR (29 downto 0);
    m_axi_bus_A_AWVALID : OUT STD_LOGIC;
    m_axi_bus_A_AWREADY : IN STD_LOGIC;
    m_axi_bus_A_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_WVALID : OUT STD_LOGIC;
    m_axi_bus_A_WREADY : IN STD_LOGIC;
    m_axi_bus_A_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_WLAST : OUT STD_LOGIC;
    m_axi_bus_A_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_ARVALID : OUT STD_LOGIC;
    m_axi_bus_A_ARREADY : IN STD_LOGIC;
    m_axi_bus_A_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bus_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bus_A_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_RVALID : IN STD_LOGIC;
    m_axi_bus_A_RREADY : OUT STD_LOGIC;
    m_axi_bus_A_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bus_A_RLAST : IN STD_LOGIC;
    m_axi_bus_A_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_BVALID : IN STD_LOGIC;
    m_axi_bus_A_BREADY : OUT STD_LOGIC;
    m_axi_bus_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bus_A_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bus_A_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln15 : IN STD_LOGIC_VECTOR (29 downto 0);
    tmp2_0_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp2_0_out_ap_vld : OUT STD_LOGIC;
    tmp2_1_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp2_1_2_out_ap_vld : OUT STD_LOGIC;
    tmp2_1_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp2_1_1_out_ap_vld : OUT STD_LOGIC;
    tmp2_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp2_1_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of test_scalaire_test_scalaire_Pipeline_VITIS_LOOP_15_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bus_B_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal icmp_ln1057_reg_323 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_2_reg_331 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_3_reg_335 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal bus_A_blk_n_R : STD_LOGIC;
    signal icmp_ln1057_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1057_reg_323_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_reg_327_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_2_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_2_reg_331_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_3_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_3_reg_335_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal bitcast_ln19_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln20_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_1_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op62_read_state4 : BOOLEAN;
    signal ap_predicate_op64_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal bitcast_ln20_1_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_2_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op69_read_state5 : BOOLEAN;
    signal ap_predicate_op71_read_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal bitcast_ln20_2_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_163_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_0_load_reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op79_read_state6 : BOOLEAN;
    signal ap_predicate_op81_read_state6 : BOOLEAN;
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal grp_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_3_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln20_3_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal tmp_2_reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal tmp_3_reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal grp_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_1_reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal tmp2_1_1_reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state14_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal tmp2_1_2_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_state17_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_predicate_tran18to23_state17 : BOOLEAN;
    signal ap_predicate_tran18to24_state17 : BOOLEAN;
    signal ap_predicate_tran18to25_state17 : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal UnifiedRetVal_reg_132 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_V_0_fu_74 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln870_fu_231_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp2_0_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_tmp2_0_load : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_153_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_153_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal grp_fu_158_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_158_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln870_fu_195_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln870_1_fu_207_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln870_2_fu_219_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_153_ce : STD_LOGIC;
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state12_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state13_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state15_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_state16_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal grp_fu_158_ce : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_exit_tran_regpp0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component test_scalaire_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component test_scalaire_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component test_scalaire_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_153_p0,
        din1 => grp_fu_153_p1,
        ce => grp_fu_153_ce,
        dout => grp_fu_153_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component test_scalaire_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_158_p0,
        din1 => grp_fu_158_p1,
        ce => grp_fu_158_ce,
        dout => grp_fu_158_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv2_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_return_preg <= UnifiedRetVal_reg_132;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                UnifiedRetVal_reg_132 <= ap_const_lv2_3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                UnifiedRetVal_reg_132 <= ap_const_lv2_2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                UnifiedRetVal_reg_132 <= ap_const_lv2_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                UnifiedRetVal_reg_132 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ap_exit_tran_regpp0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if ((icmp_ln1057_reg_323 = ap_const_lv1_1)) then 
                    ap_exit_tran_regpp0(0) <= '1';
                    ap_exit_tran_regpp0(1) <= '1';
                elsif ((ap_predicate_tran18to25_state17 = ap_const_boolean_1)) then 
                    ap_exit_tran_regpp0(0) <= '0';
                    ap_exit_tran_regpp0(1) <= '1';
                elsif ((ap_predicate_tran18to24_state17 = ap_const_boolean_1)) then 
                    ap_exit_tran_regpp0(0) <= '1';
                    ap_exit_tran_regpp0(1) <= '0';
                elsif ((ap_predicate_tran18to23_state17 = ap_const_boolean_1)) then 
                    ap_exit_tran_regpp0(0) <= '0';
                    ap_exit_tran_regpp0(1) <= '0';
                end if;
            end if; 
        end if;
    end process;

    i_V_0_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_V_0_fu_74 <= ap_const_lv9_0;
            elsif (((icmp_ln1057_3_fu_225_p2 = ap_const_lv1_0) and (icmp_ln1057_2_fu_213_p2 = ap_const_lv1_0) and (icmp_ln1057_1_fu_201_p2 = ap_const_lv1_0) and (icmp_ln1057_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_V_0_fu_74 <= add_ln870_fu_231_p2;
            end if; 
        end if;
    end process;

    tmp2_0_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp2_0_fu_78 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1057_3_reg_335_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln1057_2_reg_331_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln1057_1_reg_327_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln1057_reg_323_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                tmp2_0_fu_78 <= grp_fu_153_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1057_1_reg_327 <= icmp_ln1057_1_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1057_1_reg_327_pp0_iter1_reg <= icmp_ln1057_1_reg_327;
                icmp_ln1057_2_reg_331_pp0_iter1_reg <= icmp_ln1057_2_reg_331;
                icmp_ln1057_3_reg_335_pp0_iter1_reg <= icmp_ln1057_3_reg_335;
                icmp_ln1057_reg_323 <= icmp_ln1057_fu_189_p2;
                icmp_ln1057_reg_323_pp0_iter1_reg <= icmp_ln1057_reg_323;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_1_fu_201_p2 = ap_const_lv1_0) and (icmp_ln1057_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1057_2_reg_331 <= icmp_ln1057_2_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_2_fu_213_p2 = ap_const_lv1_0) and (icmp_ln1057_1_fu_201_p2 = ap_const_lv1_0) and (icmp_ln1057_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1057_3_reg_335 <= icmp_ln1057_3_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp2_0_load_reg_379 <= grp_load_fu_163_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp2_1_1_reg_421 <= grp_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1057_2_reg_331 = ap_const_lv1_0) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp2_1_2_reg_427 <= grp_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp2_1_reg_415 <= grp_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_1_reg_400 <= grp_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (icmp_ln1057_2_reg_331 = ap_const_lv1_0) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_2_reg_405 <= grp_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (icmp_ln1057_3_reg_335 = ap_const_lv1_0) and (icmp_ln1057_2_reg_331 = ap_const_lv1_0) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_3_reg_410 <= grp_fu_158_p2;
            end if;
        end if;
    end process;
    ap_exit_tran_regpp0(3 downto 2) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage15_subdone, ap_block_pp0_stage0_subdone, ap_exit_tran_regpp0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_exit_tran_regpp0 = ap_const_lv4_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                elsif (((ap_exit_tran_regpp0 = ap_const_lv4_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                elsif (((ap_exit_tran_regpp0 = ap_const_lv4_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                elsif (((ap_exit_tran_regpp0 = ap_const_lv4_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln870_fu_231_p2 <= std_logic_vector(unsigned(i_V_0_fu_74) + unsigned(ap_const_lv9_4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state23 <= ap_CS_fsm(17);
    ap_CS_fsm_state24 <= ap_CS_fsm(18);
    ap_CS_fsm_state25 <= ap_CS_fsm(19);
    ap_CS_fsm_state26 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(21);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(m_axi_bus_B_RVALID, m_axi_bus_A_RVALID, ap_enable_reg_pp0_iter0, icmp_ln1057_reg_323)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((m_axi_bus_B_RVALID = ap_const_logic_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0)) or ((icmp_ln1057_reg_323 = ap_const_lv1_0) and (m_axi_bus_A_RVALID = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(m_axi_bus_B_RVALID, m_axi_bus_A_RVALID, ap_enable_reg_pp0_iter0, icmp_ln1057_reg_323)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((m_axi_bus_B_RVALID = ap_const_logic_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0)) or ((icmp_ln1057_reg_323 = ap_const_lv1_0) and (m_axi_bus_A_RVALID = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(m_axi_bus_B_RVALID, m_axi_bus_A_RVALID, ap_enable_reg_pp0_iter0, ap_predicate_op62_read_state4, ap_predicate_op64_read_state4)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((ap_predicate_op62_read_state4 = ap_const_boolean_1) and (m_axi_bus_A_RVALID = ap_const_logic_0)) or ((m_axi_bus_B_RVALID = ap_const_logic_0) and (ap_predicate_op64_read_state4 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(m_axi_bus_B_RVALID, m_axi_bus_A_RVALID, ap_enable_reg_pp0_iter0, ap_predicate_op62_read_state4, ap_predicate_op64_read_state4)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((ap_predicate_op62_read_state4 = ap_const_boolean_1) and (m_axi_bus_A_RVALID = ap_const_logic_0)) or ((m_axi_bus_B_RVALID = ap_const_logic_0) and (ap_predicate_op64_read_state4 = ap_const_boolean_1))));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(m_axi_bus_B_RVALID, m_axi_bus_A_RVALID, ap_enable_reg_pp0_iter0, ap_predicate_op69_read_state5, ap_predicate_op71_read_state5)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((ap_predicate_op69_read_state5 = ap_const_boolean_1) and (m_axi_bus_A_RVALID = ap_const_logic_0)) or ((m_axi_bus_B_RVALID = ap_const_logic_0) and (ap_predicate_op71_read_state5 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(m_axi_bus_B_RVALID, m_axi_bus_A_RVALID, ap_enable_reg_pp0_iter0, ap_predicate_op69_read_state5, ap_predicate_op71_read_state5)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((ap_predicate_op69_read_state5 = ap_const_boolean_1) and (m_axi_bus_A_RVALID = ap_const_logic_0)) or ((m_axi_bus_B_RVALID = ap_const_logic_0) and (ap_predicate_op71_read_state5 = ap_const_boolean_1))));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(m_axi_bus_B_RVALID, m_axi_bus_A_RVALID, ap_enable_reg_pp0_iter0, ap_predicate_op79_read_state6, ap_predicate_op81_read_state6)
    begin
                ap_block_pp0_stage4_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((ap_predicate_op79_read_state6 = ap_const_boolean_1) and (m_axi_bus_A_RVALID = ap_const_logic_0)) or ((m_axi_bus_B_RVALID = ap_const_logic_0) and (ap_predicate_op81_read_state6 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(m_axi_bus_B_RVALID, m_axi_bus_A_RVALID, ap_enable_reg_pp0_iter0, ap_predicate_op79_read_state6, ap_predicate_op81_read_state6)
    begin
                ap_block_pp0_stage4_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((ap_predicate_op79_read_state6 = ap_const_boolean_1) and (m_axi_bus_A_RVALID = ap_const_logic_0)) or ((m_axi_bus_B_RVALID = ap_const_logic_0) and (ap_predicate_op81_read_state6 = ap_const_boolean_1))));
    end process;

        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(m_axi_bus_B_RVALID, m_axi_bus_A_RVALID, icmp_ln1057_reg_323)
    begin
                ap_block_state3_pp0_stage1_iter0 <= (((m_axi_bus_B_RVALID = ap_const_logic_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0)) or ((icmp_ln1057_reg_323 = ap_const_lv1_0) and (m_axi_bus_A_RVALID = ap_const_logic_0)));
    end process;


    ap_block_state4_pp0_stage2_iter0_assign_proc : process(m_axi_bus_B_RVALID, m_axi_bus_A_RVALID, ap_predicate_op62_read_state4, ap_predicate_op64_read_state4)
    begin
                ap_block_state4_pp0_stage2_iter0 <= (((ap_predicate_op62_read_state4 = ap_const_boolean_1) and (m_axi_bus_A_RVALID = ap_const_logic_0)) or ((m_axi_bus_B_RVALID = ap_const_logic_0) and (ap_predicate_op64_read_state4 = ap_const_boolean_1)));
    end process;


    ap_block_state5_pp0_stage3_iter0_assign_proc : process(m_axi_bus_B_RVALID, m_axi_bus_A_RVALID, ap_predicate_op69_read_state5, ap_predicate_op71_read_state5)
    begin
                ap_block_state5_pp0_stage3_iter0 <= (((ap_predicate_op69_read_state5 = ap_const_boolean_1) and (m_axi_bus_A_RVALID = ap_const_logic_0)) or ((m_axi_bus_B_RVALID = ap_const_logic_0) and (ap_predicate_op71_read_state5 = ap_const_boolean_1)));
    end process;


    ap_block_state6_pp0_stage4_iter0_assign_proc : process(m_axi_bus_B_RVALID, m_axi_bus_A_RVALID, ap_predicate_op79_read_state6, ap_predicate_op81_read_state6)
    begin
                ap_block_state6_pp0_stage4_iter0 <= (((ap_predicate_op79_read_state6 = ap_const_boolean_1) and (m_axi_bus_A_RVALID = ap_const_logic_0)) or ((m_axi_bus_B_RVALID = ap_const_logic_0) and (ap_predicate_op81_read_state6 = ap_const_boolean_1)));
    end process;

        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln1057_reg_323, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_subdone, ap_predicate_tran18to23_state17, ap_predicate_tran18to24_state17, ap_predicate_tran18to25_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and ((ap_predicate_tran18to25_state17 = ap_const_boolean_1) or (ap_predicate_tran18to24_state17 = ap_const_boolean_1) or (ap_predicate_tran18to23_state17 = ap_const_boolean_1) or (icmp_ln1057_reg_323 = ap_const_lv1_1)))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op62_read_state4_assign_proc : process(icmp_ln1057_reg_323, icmp_ln1057_1_reg_327)
    begin
                ap_predicate_op62_read_state4 <= ((icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0));
    end process;


    ap_predicate_op64_read_state4_assign_proc : process(icmp_ln1057_reg_323, icmp_ln1057_1_reg_327)
    begin
                ap_predicate_op64_read_state4 <= ((icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0));
    end process;


    ap_predicate_op69_read_state5_assign_proc : process(icmp_ln1057_reg_323, icmp_ln1057_1_reg_327, icmp_ln1057_2_reg_331)
    begin
                ap_predicate_op69_read_state5 <= ((icmp_ln1057_2_reg_331 = ap_const_lv1_0) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0));
    end process;


    ap_predicate_op71_read_state5_assign_proc : process(icmp_ln1057_reg_323, icmp_ln1057_1_reg_327, icmp_ln1057_2_reg_331)
    begin
                ap_predicate_op71_read_state5 <= ((icmp_ln1057_2_reg_331 = ap_const_lv1_0) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0));
    end process;


    ap_predicate_op79_read_state6_assign_proc : process(icmp_ln1057_reg_323, icmp_ln1057_1_reg_327, icmp_ln1057_2_reg_331, icmp_ln1057_3_reg_335)
    begin
                ap_predicate_op79_read_state6 <= ((icmp_ln1057_3_reg_335 = ap_const_lv1_0) and (icmp_ln1057_2_reg_331 = ap_const_lv1_0) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0));
    end process;


    ap_predicate_op81_read_state6_assign_proc : process(icmp_ln1057_reg_323, icmp_ln1057_1_reg_327, icmp_ln1057_2_reg_331, icmp_ln1057_3_reg_335)
    begin
                ap_predicate_op81_read_state6 <= ((icmp_ln1057_3_reg_335 = ap_const_lv1_0) and (icmp_ln1057_2_reg_331 = ap_const_lv1_0) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0));
    end process;


    ap_predicate_tran18to23_state17_assign_proc : process(icmp_ln1057_reg_323, icmp_ln1057_1_reg_327, icmp_ln1057_2_reg_331, icmp_ln1057_3_reg_335)
    begin
                ap_predicate_tran18to23_state17 <= ((icmp_ln1057_3_reg_335 = ap_const_lv1_1) and (icmp_ln1057_2_reg_331 = ap_const_lv1_0) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0));
    end process;


    ap_predicate_tran18to24_state17_assign_proc : process(icmp_ln1057_reg_323, icmp_ln1057_1_reg_327, icmp_ln1057_2_reg_331)
    begin
                ap_predicate_tran18to24_state17 <= ((icmp_ln1057_2_reg_331 = ap_const_lv1_1) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0));
    end process;


    ap_predicate_tran18to25_state17_assign_proc : process(icmp_ln1057_reg_323, icmp_ln1057_1_reg_327)
    begin
                ap_predicate_tran18to25_state17 <= ((icmp_ln1057_1_reg_327 = ap_const_lv1_1) and (icmp_ln1057_reg_323 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(UnifiedRetVal_reg_132, ap_return_preg, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ap_return <= UnifiedRetVal_reg_132;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_allocacmp_tmp2_0_load_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, icmp_ln1057_reg_323_pp0_iter1_reg, icmp_ln1057_1_reg_327_pp0_iter1_reg, icmp_ln1057_2_reg_331_pp0_iter1_reg, icmp_ln1057_3_reg_335_pp0_iter1_reg, grp_fu_153_p2, ap_enable_reg_pp0_iter1, tmp2_0_fu_78)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1057_3_reg_335_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln1057_2_reg_331_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln1057_1_reg_327_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln1057_reg_323_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            ap_sig_allocacmp_tmp2_0_load <= grp_fu_153_p2;
        else 
            ap_sig_allocacmp_tmp2_0_load <= tmp2_0_fu_78;
        end if; 
    end process;

    bitcast_ln19_1_fu_264_p1 <= m_axi_bus_A_RDATA;
    bitcast_ln19_2_fu_274_p1 <= m_axi_bus_A_RDATA;
    bitcast_ln19_3_fu_284_p1 <= m_axi_bus_A_RDATA;
    bitcast_ln19_fu_254_p1 <= m_axi_bus_A_RDATA;
    bitcast_ln20_1_fu_269_p1 <= m_axi_bus_B_RDATA;
    bitcast_ln20_2_fu_279_p1 <= m_axi_bus_B_RDATA;
    bitcast_ln20_3_fu_289_p1 <= m_axi_bus_B_RDATA;
    bitcast_ln20_fu_259_p1 <= m_axi_bus_B_RDATA;

    bus_A_blk_n_R_assign_proc : process(m_axi_bus_A_RVALID, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4, icmp_ln1057_reg_323, icmp_ln1057_1_reg_327, icmp_ln1057_2_reg_331, icmp_ln1057_3_reg_335, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln1057_2_reg_331 = ap_const_lv1_0) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln1057_3_reg_335 = ap_const_lv1_0) and (icmp_ln1057_2_reg_331 = ap_const_lv1_0) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            bus_A_blk_n_R <= m_axi_bus_A_RVALID;
        else 
            bus_A_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    bus_B_blk_n_R_assign_proc : process(m_axi_bus_B_RVALID, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4, icmp_ln1057_reg_323, icmp_ln1057_1_reg_327, icmp_ln1057_2_reg_331, icmp_ln1057_3_reg_335, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln1057_2_reg_331 = ap_const_lv1_0) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln1057_3_reg_335 = ap_const_lv1_0) and (icmp_ln1057_2_reg_331 = ap_const_lv1_0) and (icmp_ln1057_1_reg_327 = ap_const_lv1_0) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            bus_B_blk_n_R <= m_axi_bus_B_RVALID;
        else 
            bus_B_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_153_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage15_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
            grp_fu_153_ce <= ap_const_logic_1;
        else 
            grp_fu_153_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_153_p0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage0, grp_load_fu_163_p1, grp_fu_153_p2, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage12, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage8, ap_block_pp0_stage12)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_153_p0 <= grp_fu_153_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_153_p0 <= grp_load_fu_163_p1;
        else 
            grp_fu_153_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_153_p1_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage0, grp_fu_158_p2, tmp_1_reg_400, tmp_2_reg_405, tmp_3_reg_410, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage12, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage8, ap_block_pp0_stage12)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_153_p1 <= tmp_3_reg_410;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_153_p1 <= tmp_2_reg_405;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_153_p1 <= tmp_1_reg_400;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_153_p1 <= grp_fu_158_p2;
        else 
            grp_fu_153_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_158_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
            grp_fu_158_ce <= ap_const_logic_1;
        else 
            grp_fu_158_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_158_p0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, bitcast_ln19_fu_254_p1, bitcast_ln19_1_fu_264_p1, bitcast_ln19_2_fu_274_p1, bitcast_ln19_3_fu_284_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                grp_fu_158_p0 <= bitcast_ln19_3_fu_284_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                grp_fu_158_p0 <= bitcast_ln19_2_fu_274_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                grp_fu_158_p0 <= bitcast_ln19_1_fu_264_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_158_p0 <= bitcast_ln19_fu_254_p1;
            else 
                grp_fu_158_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_158_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_158_p1_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, bitcast_ln20_fu_259_p1, bitcast_ln20_1_fu_269_p1, bitcast_ln20_2_fu_279_p1, bitcast_ln20_3_fu_289_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                grp_fu_158_p1 <= bitcast_ln20_3_fu_289_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                grp_fu_158_p1 <= bitcast_ln20_2_fu_279_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                grp_fu_158_p1 <= bitcast_ln20_1_fu_269_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_158_p1 <= bitcast_ln20_fu_259_p1;
            else 
                grp_fu_158_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_158_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_163_p1_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4, icmp_ln1057_reg_323, ap_CS_fsm_state26, ap_CS_fsm_state23, ap_CS_fsm_state24, tmp2_0_fu_78, ap_sig_allocacmp_tmp2_0_load)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_load_fu_163_p1 <= tmp2_0_fu_78;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_load_fu_163_p1 <= ap_sig_allocacmp_tmp2_0_load;
        else 
            grp_load_fu_163_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln1057_1_fu_201_p2 <= "1" when (or_ln870_fu_195_p2 = ap_const_lv9_FF) else "0";
    icmp_ln1057_2_fu_213_p2 <= "1" when (or_ln870_1_fu_207_p2 = ap_const_lv9_FF) else "0";
    icmp_ln1057_3_fu_225_p2 <= "1" when (or_ln870_2_fu_219_p2 = ap_const_lv9_FF) else "0";
    icmp_ln1057_fu_189_p2 <= "1" when (i_V_0_fu_74 = ap_const_lv9_FF) else "0";
    m_axi_bus_A_ARADDR <= ap_const_lv32_0;
    m_axi_bus_A_ARBURST <= ap_const_lv2_0;
    m_axi_bus_A_ARCACHE <= ap_const_lv4_0;
    m_axi_bus_A_ARID <= ap_const_lv1_0;
    m_axi_bus_A_ARLEN <= ap_const_lv32_0;
    m_axi_bus_A_ARLOCK <= ap_const_lv2_0;
    m_axi_bus_A_ARPROT <= ap_const_lv3_0;
    m_axi_bus_A_ARQOS <= ap_const_lv4_0;
    m_axi_bus_A_ARREGION <= ap_const_lv4_0;
    m_axi_bus_A_ARSIZE <= ap_const_lv3_0;
    m_axi_bus_A_ARUSER <= ap_const_lv1_0;
    m_axi_bus_A_ARVALID <= ap_const_logic_0;
    m_axi_bus_A_AWADDR <= ap_const_lv32_0;
    m_axi_bus_A_AWBURST <= ap_const_lv2_0;
    m_axi_bus_A_AWCACHE <= ap_const_lv4_0;
    m_axi_bus_A_AWID <= ap_const_lv1_0;
    m_axi_bus_A_AWLEN <= ap_const_lv32_0;
    m_axi_bus_A_AWLOCK <= ap_const_lv2_0;
    m_axi_bus_A_AWPROT <= ap_const_lv3_0;
    m_axi_bus_A_AWQOS <= ap_const_lv4_0;
    m_axi_bus_A_AWREGION <= ap_const_lv4_0;
    m_axi_bus_A_AWSIZE <= ap_const_lv3_0;
    m_axi_bus_A_AWUSER <= ap_const_lv1_0;
    m_axi_bus_A_AWVALID <= ap_const_logic_0;
    m_axi_bus_A_BREADY <= ap_const_logic_0;

    m_axi_bus_A_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, icmp_ln1057_reg_323, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_predicate_op62_read_state4, ap_block_pp0_stage2_11001, ap_predicate_op69_read_state5, ap_block_pp0_stage3_11001, ap_predicate_op79_read_state6, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_predicate_op79_read_state6 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_predicate_op69_read_state5 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_predicate_op62_read_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            m_axi_bus_A_RREADY <= ap_const_logic_1;
        else 
            m_axi_bus_A_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bus_A_WDATA <= ap_const_lv32_0;
    m_axi_bus_A_WID <= ap_const_lv1_0;
    m_axi_bus_A_WLAST <= ap_const_logic_0;
    m_axi_bus_A_WSTRB <= ap_const_lv4_0;
    m_axi_bus_A_WUSER <= ap_const_lv1_0;
    m_axi_bus_A_WVALID <= ap_const_logic_0;
    m_axi_bus_B_ARADDR <= ap_const_lv32_0;
    m_axi_bus_B_ARBURST <= ap_const_lv2_0;
    m_axi_bus_B_ARCACHE <= ap_const_lv4_0;
    m_axi_bus_B_ARID <= ap_const_lv1_0;
    m_axi_bus_B_ARLEN <= ap_const_lv32_0;
    m_axi_bus_B_ARLOCK <= ap_const_lv2_0;
    m_axi_bus_B_ARPROT <= ap_const_lv3_0;
    m_axi_bus_B_ARQOS <= ap_const_lv4_0;
    m_axi_bus_B_ARREGION <= ap_const_lv4_0;
    m_axi_bus_B_ARSIZE <= ap_const_lv3_0;
    m_axi_bus_B_ARUSER <= ap_const_lv1_0;
    m_axi_bus_B_ARVALID <= ap_const_logic_0;
    m_axi_bus_B_AWADDR <= ap_const_lv32_0;
    m_axi_bus_B_AWBURST <= ap_const_lv2_0;
    m_axi_bus_B_AWCACHE <= ap_const_lv4_0;
    m_axi_bus_B_AWID <= ap_const_lv1_0;
    m_axi_bus_B_AWLEN <= ap_const_lv32_0;
    m_axi_bus_B_AWLOCK <= ap_const_lv2_0;
    m_axi_bus_B_AWPROT <= ap_const_lv3_0;
    m_axi_bus_B_AWQOS <= ap_const_lv4_0;
    m_axi_bus_B_AWREGION <= ap_const_lv4_0;
    m_axi_bus_B_AWSIZE <= ap_const_lv3_0;
    m_axi_bus_B_AWUSER <= ap_const_lv1_0;
    m_axi_bus_B_AWVALID <= ap_const_logic_0;
    m_axi_bus_B_BREADY <= ap_const_logic_0;

    m_axi_bus_B_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, icmp_ln1057_reg_323, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_predicate_op64_read_state4, ap_block_pp0_stage2_11001, ap_predicate_op71_read_state5, ap_block_pp0_stage3_11001, ap_predicate_op81_read_state6, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_predicate_op81_read_state6 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_predicate_op71_read_state5 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_predicate_op64_read_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1057_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            m_axi_bus_B_RREADY <= ap_const_logic_1;
        else 
            m_axi_bus_B_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bus_B_WDATA <= ap_const_lv32_0;
    m_axi_bus_B_WID <= ap_const_lv1_0;
    m_axi_bus_B_WLAST <= ap_const_logic_0;
    m_axi_bus_B_WSTRB <= ap_const_lv4_0;
    m_axi_bus_B_WUSER <= ap_const_lv1_0;
    m_axi_bus_B_WVALID <= ap_const_logic_0;
    or_ln870_1_fu_207_p2 <= (i_V_0_fu_74 or ap_const_lv9_2);
    or_ln870_2_fu_219_p2 <= (i_V_0_fu_74 or ap_const_lv9_3);
    or_ln870_fu_195_p2 <= (i_V_0_fu_74 or ap_const_lv9_1);

    tmp2_0_out_assign_proc : process(grp_load_fu_163_p1, tmp2_0_load_reg_379, ap_CS_fsm_state26, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            tmp2_0_out <= tmp2_0_load_reg_379;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            tmp2_0_out <= grp_load_fu_163_p1;
        else 
            tmp2_0_out <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tmp2_0_out_ap_vld_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            tmp2_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_1_1_out <= tmp2_1_1_reg_421;

    tmp2_1_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            tmp2_1_1_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_1_2_out <= tmp2_1_2_reg_427;

    tmp2_1_2_out_ap_vld_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            tmp2_1_2_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_1_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_1_out <= tmp2_1_reg_415;

    tmp2_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            tmp2_1_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
